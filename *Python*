Python 2.7.6 | 64-bit | (default, Jun  4 2014, 16:42:26)
Type "copyright", "credits" or "license" for more information.

IPython 2.3.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]:
In [2]:
In [3]:
In [4]: run CFSR_site_extractor.py
  File "/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py", line 6
    def Class SoilSite(object):
                     ^
SyntaxError: invalid syntax


In [7]: run CFSR_site_extractor.py

In [8]: lats
Out[8]: [40.0062, 34.1, 45.806, 36.605, 33.648056, -12.569167]

In [9]: zip(names, lats, lons)
Out[9]:
[('Bondville', 40.0062, -88.2904),
 ('Stunt Ranch', 34.1, -118.65),
 ('Willow Creek', 45.806, -90.0798),
 ('OK', 36.605, -97.485),
 ('Boyd Deep', 33.648056, -116.376667),
 ('Peru', -12.569167, -70.100111)]

In [10]: run CFSR_site_extractor.py

In [11]: sites
Out[11]:
[<__main__.SoilSite at 0x10c8db4d0>,
 <__main__.SoilSite at 0x10c8db9d0>,
 <__main__.SoilSite at 0x10c8db990>,
 <__main__.SoilSite at 0x10c8db450>,
 <__main__.SoilSite at 0x10c8db550>,
 <__main__.SoilSite at 0x10c8db490>]

In [12]: sites[0]
Out[12]: <__main__.SoilSite at 0x10c8db4d0>

In [13]: run CFSR_site_extractor.py

In [14]: print(sites[0])
Bondville -- (-88.2904, 40.0062)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-14-8df1571d9d4e> in <module>()
----> 1 print(sites[0])

TypeError: __str__ returned non-string (type NoneType)

In [15]: run CFSR_site_extractor.py

In [16]: print(sites[0])
Bondville -- (-88.2904, 40.0062)

In [17]: [print s for s in sites]
  File "<ipython-input-17-06a72c911509>", line 1
    [print s for s in sites]
         ^
SyntaxError: invalid syntax


In [18]: [print(s) for s in sites]
  File "<ipython-input-18-d5a0553923cf>", line 1
    [print(s) for s in sites]
         ^
SyntaxError: invalid syntax


In [19]: [str(s) for s in sites]
Out[19]:
['Bondville -- (-88.2904, 40.0062)',
 'Stunt Ranch -- (-118.65, 34.1)',
 'Willow Creek -- (-90.0798, 45.806)',
 'OK -- (-97.485, 36.605)',
 'Boyd Deep -- (-116.376667, 33.648056)',
 'Peru -- (-70.100111, -12.569167)']

In [20]: import bisect

In [21]:
Do you really want to exit ([y]/n)? n

In [21]: run tim_OPeNDAP_test.py

In [24]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2
syntax error, unexpected WORD_WORD, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR
context: <html^><head><title>Apache Tomcat/6.0.20 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 404 - /modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds</h1><HR size="1" noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b> <u>/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds</u></p><p><b>description</b> <u>The requested resource (/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds) is not available.</u></p><HR size="1" noshade="noshade"><h3>Apache Tomcat/6.0.20</h3></body></html>
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py in <module>()
     42             validURL = True
     43         except RuntimeError:
---> 44             date -= datetime.timedelta(hours=6)
     45             ncount += 1

NameError: name 'date' is not defined

In [28]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2
syntax error, unexpected WORD_WORD, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR
context: <html^><head><title>Apache Tomcat/6.0.20 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 404 - /modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds</h1><HR size="1" noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b> <u>/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds</u></p><p><b>description</b> <u>The requested resource (/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds) is not available.</u></p><HR size="1" noshade="noshade"><h3>Apache Tomcat/6.0.20</h3></body></html>

In [29]: URL
Out[29]: 'http://nomads.ncdc.noaa.gov/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2'

In [30]: nc = netCDF4.Dataset(URL)
syntax error, unexpected WORD_WORD, expecting SCAN_ATTR or SCAN_DATASET or SCAN_ERROR
context: <html^><head><title>Apache Tomcat/6.0.20 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 404 - /modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds</h1><HR size="1" noshade="noshade"><p><b>type</b> Status report</p><p><b>message</b> <u>/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds</u></p><p><b>description</b> <u>The requested resource (/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050500.grb2.dds) is not available.</u></p><HR size="1" noshade="noshade"><h3>Apache Tomcat/6.0.20</h3></body></html>
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-30-520b7bd526b5> in <module>()
----> 1 nc = netCDF4.Dataset(URL)

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Dataset.__init__ (netCDF4.c:19736)()

RuntimeError: NetCDF: file not found

In [31]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050512.grb2

In [32]: len(nc.variables)
Out[32]: 99

In [33]: nc.variables.keys
*** output flushed ***
In [38]: [k for k in nc.variables.keys if re.match('Soil', l)]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-38-7a5440cb7735> in <module>()
----> 1 [k for k in nc.variables.keys if re.match('Soil', l)]

TypeError: 'instancemethod' object is not iterable

In [39]: [k for k in nc.variables.keys if re.match('Soil', k)]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-39-5872e6211293> in <module>()
----> 1 [k for k in nc.variables.keys if re.match('Soil', k)]

TypeError: 'instancemethod' object is not iterable

In [40]: [k for k in nc.variables.keys() if re.match('Soil', k)]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-40-1e00c303cb35> in <module>()
----> 1 [k for k in nc.variables.keys() if re.match('Soil', k)]

NameError: name 're' is not defined

In [41]: import re

In [42]: [k for k in nc.variables.keys() if re.match('Soil', k)]
Out[42]: [u'Soil_moisture_content', u'Soil_type_as_in_Zobler']

In [43]: [k for k in nc.variables.keys() if re.match('soil', k)]
Out[43]: []

In [44]: [k for k in nc.variables.keys()]
Out[44]:
[u'time',
 u'lat',
 u'gaussw',
 u'lon',
 u'latLonCoordSys',
 u'depth_below_surface_layer',
 u'depth_below_surface_layer_bounds',
 u'depth_below_surface_layer1',
 u'depth_below_surface_layer1_bounds',
 u'height_above_ground',
 u'height_above_ground1',
 u'hybrid',
 u'Albedo',
 u'Categorical_Rain',
 u'Clear_Sky_Downward_Long_Wave_Flux',
 u'Clear_Sky_Downward_Solar_Flux',
 u'Clear_Sky_Upward_Long_Wave_Flux',
 u'Clear_Sky_Upward_Long_Wave_Flux_surface',
 u'Clear_Sky_Upward_Solar_Flux',
 u'Clear_Sky_Upward_Solar_Flux_surface',
 u'Clear_sky_UV-B_downward_solar_flu',
 u'Cloud_Work_Function',
 u'Convective_Precipitation_Rate',
 u'Direct_evaporation_from_bare_soil',
 u'Downward_Long-Wave_Rad_Flux',
 u'Downward_Short-Wave_Rad_Flux',
 u'Downward_Short-Wave_Rad_Flux_surface',
 u'Exchange_Coefficient',
 u'Frictional_Velocity',
 u'Geopotential_height',
 u'Geopotential_height_surface',
 u'Ground_Heat_Flux',
 u'Ice_cover_Proportion',
 u'Ice_thickness',
 u'Land_cover_1land_2sea',
 u'Latent_heat_net_flux',
 u'Liquid_Volumetric_Soil_Moisture_non_frozen',
 u'Maximum_specific_humidity_at_2m',
 u'Maximum_temperature',
 u'Meridional_Flux_of_Gravity_Wave_Stress',
 u'Minimum_specific_humidity_at_2m',
 u'Minimum_temperature',
 u'Momentum_flux_u_component',
 u'Momentum_flux_v_component',
 u'Planetary_Boundary_Layer_Height',
 u'Plant_Canopy_Surface_Water',
 u'Potential_Evaporation_Rate',
 u'Precipitable_water',
 u'Precipitation_rate',
 u'Pressure',
 u'Pressure_high_cloud_top',
 u'Pressure_low_cloud_bottom',
 u'Pressure_low_cloud_top',
 u'Pressure_middle_cloud_bottom',
 u'Pressure_middle_cloud_top',
 u'Pressure_surface',
 u'Sensible_heat_net_flux',
 u'Snow_Cover',
 u'Snow_depth',
 u'Snow_Phase_Change_Heat_Flux',
 u'Soil_moisture_content',
 u'Soil_type_as_in_Zobler',
 u'Specific_humidity',
 u'Specific_humidity_hybrid',
 u'Storm_Surface_Runoff',
 u'Sublimation_evaporation_from_snow',
 u'Surface_exchange_coefficients_for_T_and_Q_divided_by_delta_z',
 u'Surface_exchange_coefficients_for_U_and_V_divided_by_delta_z',
 u'Surface_roughness',
 u'Surface_Slope_Type',
 u'Temperature',
 u'Temperature_height_above_ground',
 u'Temperature_high_cloud_top',
 u'Temperature_hybrid',
 u'Temperature_low_cloud_top',
 u'Temperature_middle_cloud_top',
 u'Temperature_surface',
 u'Total_cloud_cover',
 u'Total_cloud_cover_convective_cloud',
 u'Total_cloud_cover_entire_atmosphere',
 u'Total_cloud_cover_high_cloud',
 u'Total_cloud_cover_low_cloud',
 u'Total_cloud_cover_middle_cloud',
 u'U-component_of_wind',
 u'U-component_of_wind_hybrid',
 u'Upward_Long-Wave_Rad_Flux',
 u'Upward_Long-Wave_Rad_Flux_surface',
 u'Upward_Short-Wave_Rad_Flux',
 u'Upward_Short-Wave_Rad_Flux_surface',
 u'UV-B_downward_solar_flux',
 u'V-component_of_wind',
 u'V-component_of_wind_hybrid',
 u'Vegetation_canopy_temperature',
 u'Vegetation',
 u'Vegetation_Type',
 u'Volumetric_Soil_Moisture_Content',
 u'Water_equivalent_of_accumulated_snow_depth',
 u'Water_runoff',
 u'Zonal_Flux_of_Gravity_Wave_Stress']

In [45]: nc.variables['Temperature_surface']
Out[45]: <netCDF4.Variable at 0x10c9a3a68>

In [46]: nc.variables['Temperature_surface'].dimensions
Out[46]: (u'time', u'lat', u'lon')

In [47]: nc.variables['Temperature'].dimensions
Out[47]: (u'time', u'depth_below_surface_layer', u'lat', u'lon')

In [48]: nc.variables['depth_below_surface_layer'].dimensions
Out[48]: (u'depth_below_surface_layer',)

In [49]: nc.variables['depth_below_surface_layer']
Out[49]: <netCDF4.Variable at 0x10c928e90>

In [50]: nc.variables['depth_below_surface_layer'][:]
Out[50]: array([ 1.5 ,  0.7 ,  0.25,  0.05])

In [51]: nc.variables['depth_below_surface_layer1'][:]
Out[51]: array([ 1.])

In [52]: nc.variables['depth_below_surface_layer1'].attr
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-54-aad3a35cc490> in <module>()
----> 1 nc.variables['depth_below_surface_layer1'].attr

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable.__getattr__ (netCDF4.c:36363)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable.getncattr (netCDF4.c:34245)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4._get_att (netCDF4.c:14866)()

AttributeError: NetCDF: Attribute not found

In [55]: dir(nc.variables['depth_below_surface_layer1'])
Out[55]:
[u'GRIB_level_type',
 u'_CoordinateAxisType',
 u'_CoordinateZisLayer',
 '__array__',
 '__class__',
 '__delattr__',
 '__delitem__',
 '__doc__',
 '__format__',
 '__getattr__',
 '__getattribute__',
 '__getitem__',
 '__hash__',
 '__init__',
 '__len__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__setitem__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__unicode__',
 '_assign_vlen',
 '_cmptype',
 '_get',
 '_getdims',
 '_grp',
 '_grpid',
 '_iscompound',
 '_isprimitive',
 '_isvlen',
 '_name',
 '_nunlimdim',
 '_put',
 '_toma',
 '_varid',
 '_vltype',
 'assignValue',
 u'bounds',
 'chunking',
 'datatype',
 'delncattr',
 'dimensions',
 'dtype',
 'endian',
 'filters',
 'getValue',
 'get_var_chunk_cache',
 'getncattr',
 'group',
 u'long_name',
 'mask',
 'ncattrs',
 'ndim',
 u'positive',
 'renameAttribute',
 'scale',
 'set_auto_mask',
 'set_auto_maskandscale',
 'set_auto_scale',
 'set_var_chunk_cache',
 'setncattr',
 'setncatts',
 'shape',
 'size',
 u'units']

In [56]: nc.variables['depth_below_surface_layer1'].ncatrrs
*** output flushed ***
In [57]: nc.variables['depth_below_surface_layer1'].ncattrs
Out[57]: <function ncattrs>

In [58]: nc.variables['depth_below_surface_layer1'].ncattrs()
Out[58]:
[u'long_name',
 u'units',
 u'positive',
 u'GRIB_level_type',
 u'_CoordinateAxisType',
 u'bounds',
 u'_CoordinateZisLayer']

In [59]: nc.variables['depth_below_surface_layer1'].units
Out[59]: u'm'

In [60]: nc.variables['Volumetric_Soil_Moisture_Content'].shape
Out[60]: (1, 4, 576, 1152)

In [61]: lat
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-61-8a333b670cbb> in <module>()
----> 1 lat

NameError: name 'lat' is not defined

In [62]: nc.close()

In [63]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050512.grb2
  C-c C-c
  C-c C-c


---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py in <module>()
     52     depth_bnds = nc.variables['depth_below_surface_layer_bounds']
     53
---> 54     vwc = nc.variables['Volumetric_Soil_Moisture_Content'][:]
     55     soilT = nc.variables['Temperature_depth_below_surface_layer']

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable.__getitem__ (netCDF4.c:37286)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable._get (netCDF4.c:44834)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable.dimensions.__get__ (netCDF4.c:33606)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable._getdims (netCDF4.c:33059)()

/Applications/Canopy.app/appdata/canopy-1.4.1.1975.macosx-x86_64/Canopy.app/Contents/lib/python2.7/encodings/utf_8.pyc in decode(input, errors)
     13 encode = codecs.utf_8_encode
     14
---> 15 def decode(input, errors='strict'):
     16     return codecs.utf_8_decode(input, errors, True)
     17

KeyboardInterrupt:

In [64]:
In [64]:
In [64]:
In [64]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050512.grb2
  C-c C-c
  C-c C-c
  C-c C-c  C-c C-c  C-c C-c  C-c C-c

---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py in <module>()
     52     depth_bnds = nc.variables['depth_below_surface_layer_bounds']
     53
---> 54     vwc = nc.variables['Volumetric_Soil_Moisture_Content']
     55     soilT = nc.variables['Temperature_depth_below_surface_layer']

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable.__getitem__ (netCDF4.c:37286)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable._get (netCDF4.c:44834)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable.dimensions.__get__ (netCDF4.c:33606)()

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Variable._getdims (netCDF4.c:33059)()

/Applications/Canopy.app/appdata/canopy-1.4.1.1975.macosx-x86_64/Canopy.app/Contents/lib/python2.7/encodings/utf_8.pyc in decode(input, errors)
     13 encode = codecs.utf_8_encode
     14
---> 15 def decode(input, errors='strict'):
     16     return codecs.utf_8_decode(input, errors, True)
     17

KeyboardInterrupt:

In [65]:   File "<ipython-input-65-8726eb05d0ac>", line 1
    C-c C-c  C-c C-c
        ^
SyntaxError: invalid syntax


In [66]:
In [66]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050512.grb2
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py in <module>()
     53
     54     vwc = nc.variables['Volumetric_Soil_Moisture_Content']
---> 55     soilT = nc.variables['Temperature_depth_below_surface_layer']

KeyError: 'Temperature_depth_below_surface_layer'

In [67]: lon
Out[67]:
array([  0.00000000e+00,   3.12999994e-01,   6.25999987e-01, ...,
         3.59636993e+02,   3.59949993e+02,   3.60262993e+02])

In [68]: lon.shape
Out[68]: (1152,)

In [69]: lat.shape
Out[69]: (576,)

In [70]: nc.variables['Temperature']
Out[70]: <netCDF4.Variable at 0x10c9432b0>

In [71]: nc.variables['Temperature'].dimensions
Out[71]: (u'time', u'depth_below_surface_layer', u'lat', u'lon')

In [72]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050512.grb2
http://nomads.ncdc.noaa.gov/thredds/dodsC/modeldata/cmd_flxf/2008/200805/20080505/flxf01.gdas.2008050512.grb2

In [73]: len(nc00.variables)
Out[75]: 99

In [76]: len(nc01.variables)
Out[76]: 101

In [77]:
Do you really want to exit ([y]/n)? n

In [83]: np.setdiff1d(nc00.variables, nc01.variables)
Out[85]:
array([],
      dtype='<U60')

In [86]: np.setdiff1d(nc01.variables, nc00.variables)
Out[86]:
array([u'Pressure_convective_cloud_top', u'Pressure_high_cloud_bottom'],
      dtype='<U60')

In [87]: ---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-87-cb0a515eee6a> in <module>()
----> 1 nc06 = read_URL(URL_flxf06)

NameError: name 'URL_flxf06' is not defined

In [88]:
In [89]: http://nomads.ncdc.noaa.gov/thredds/dodsC/modeldata/cmd_flxf/2008/200805/20080505/flxf06.gdas.2008050512.grb2

In [90]: np.setdiff1d(nc00.variables, nc06.variables)
Out[90]:
array([],
      dtype='<U60')

In [91]: np.setdiff1d(nc06.variables, nc00.variables)
Out[91]:
array([u'Pressure_convective_cloud_top', u'Pressure_high_cloud_bottom'],
      dtype='<U60')

In [92]: nc00.ncattrs()
Out[102]:
[u'Conventions',
 u'Originating_center',
 u'Generating_Process_or_Model',
 u'Product_Status',
 u'Product_Type',
 u'cdm_data_type',
 u'creator_name',
 u'file_format',
 u'location',
 u'history',
 u'_CoordinateModelRunDate',
 u'DODS.strlen']

In [103]: nc06.ncattrs()
Out[103]:
[u'Conventions',
 u'Originating_center',
 u'Generating_Process_or_Model',
 u'Product_Status',
 u'Product_Type',
 u'cdm_data_type',
 u'creator_name',
 u'file_format',
 u'location',
 u'history',
 u'_CoordinateModelRunDate',
 u'DODS.strlen']

In [104]: nc06.ncattrs[0]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-104-8bd9efa36ce6> in <module>()
----> 1 nc06.ncattrs[0]

TypeError: 'builtin_function_or_method' object has no attribute '__getitem__'

In [105]: nc06.ncattrs['Conventions']
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-105-c794f7e5e3b0> in <module>()
----> 1 nc06.ncattrs['Conventions']

TypeError: 'builtin_function_or_method' object has no attribute '__getitem__'

In [106]: nc06['Conventions']
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-106-22d60dcfbff7> in <module>()
----> 1 nc06['Conventions']

TypeError: 'netCDF4.Dataset' object has no attribute '__getitem__'

In [107]: nc06.Conventions
Out[107]: u'CF-1.0'

In [108]: nc06.getncattr('Conventions')
Out[119]: u'CF-1.0'

In [120]: [nc06.getncattr(a) for a in nc06.ncattrs]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-129-35ee2ea1f89f> in <module>()
----> 1 [nc06.getncattr(a) for a in nc06.ncattrs]

TypeError: 'builtin_function_or_method' object is not iterable

In [130]: [a for a in nc06.ncattrs]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-130-a84b631db331> in <module>()
----> 1 [a for a in nc06.ncattrs]

TypeError: 'builtin_function_or_method' object is not iterable

In [131]: [a for a in nc06.ncattrs()]
Out[131]:
[u'Conventions',
 u'Originating_center',
 u'Generating_Process_or_Model',
 u'Product_Status',
 u'Product_Type',
 u'cdm_data_type',
 u'creator_name',
 u'file_format',
 u'location',
 u'history',
 u'_CoordinateModelRunDate',
 u'DODS.strlen']

In [132]: [nc06.getncattr(a) for a in nc06.ncattrs()]
Out[137]:
[u'CF-1.0',
 u'US National Weather Service (NCEP) subcenter = 0',
 u'Forecast',
 u'Operational products',
 u'Forecast products',
 u'GRID',
 u'US National Weather Service (NCEP) subcenter = 0',
 u'GRIB-2',
 u'/modeldata/cmd_flxf/2008/200805/20080505/flxf06.gdas.2008050512.grb2',
 u'Direct read of GRIB-2 into NetCDF-Java 4.0 API',
 u'2008-05-05T12:00:00Z',
 0]

In [138]: [print(a, nc06.getncattr(a)) for a in nc06.ncattrs()]
  File "<ipython-input-138-29f133b11ea2>", line 1
    [print(a, nc06.getncattr(a)) for a in nc06.ncattrs()]
         ^
SyntaxError: invalid syntax


In [139]: [(a, nc06.getncattr(a)) for a in nc06.ncattrs()]
Out[139]:
[(u'Conventions', u'CF-1.0'),
 (u'Originating_center', u'US National Weather Service (NCEP) subcenter = 0'),
 (u'Generating_Process_or_Model', u'Forecast'),
 (u'Product_Status', u'Operational products'),
 (u'Product_Type', u'Forecast products'),
 (u'cdm_data_type', u'GRID'),
 (u'creator_name', u'US National Weather Service (NCEP) subcenter = 0'),
 (u'file_format', u'GRIB-2'),
 (u'location',
  u'/modeldata/cmd_flxf/2008/200805/20080505/flxf06.gdas.2008050512.grb2'),
 (u'history', u'Direct read of GRIB-2 into NetCDF-Java 4.0 API'),
 (u'_CoordinateModelRunDate', u'2008-05-05T12:00:00Z'),
 (u'DODS.strlen', 0)]

In [140]: [(a, nc00.getncattr(a)) for a in nc00.ncattrs()]
Out[140]:
[(u'Conventions', u'CF-1.0'),
 (u'Originating_center', u'US National Weather Service (NCEP) subcenter = 0'),
 (u'Generating_Process_or_Model', u'Forecast'),
 (u'Product_Status', u'Operational products'),
 (u'Product_Type', u'Forecast products'),
 (u'cdm_data_type', u'GRID'),
 (u'creator_name', u'US National Weather Service (NCEP) subcenter = 0'),
 (u'file_format', u'GRIB-2'),
 (u'location',
  u'/modeldata/cmd_flxf/2008/200805/20080505/flxf00.gdas.2008050512.grb2'),
 (u'history', u'Direct read of GRIB-2 into NetCDF-Java 4.0 API'),
 (u'_CoordinateModelRunDate', u'2008-05-05T12:00:00Z'),
 (u'DODS.strlen', 0)]

In [141]: run tim_OPeNDAP_test.py
  File "/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py", line 58
    ncsoil = read_URL(url_soil)
    ^
IndentationError: unexpected indent


In [142]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm3.l.gdas.200912.grb2

In [143]: [(a, ncsoil.getncattr(a)) for a in ncsoil.ncattrs()]
Out[143]:
[(u'Conventions', u'CF-1.4'),
 (u'Originating_center', u'US National Weather Service - NCEP(WMC) (7)'),
 (u'Generating_Model', u'Analysis from Global Data Assimilation System'),
 (u'Product_Status', u'Operational products'),
 (u'Product_Type', u'Forecast products'),
 (u'title',
  u'US National Weather Service - NCEP(WMC) Analysis from Global Data Assimilation System Forecast products'),
 (u'institution', u'Center US National Weather Service - NCEP(WMC) (7)'),
 (u'source', u'Type: Forecast products Status: Operational products'),
 (u'history', u'Direct read of GRIB-2 into NetCDF-Java 4 API'),
 (u'CF%3afeature_type', u'GRID'),
 (u'file_format', u'GRIB-2'),
 (u'location',
  u'/nomads3_data/raid2/noaaport/merged/cfsrr/200912/soilm3.l.gdas.200912.grb2'),
 (u'_CoordinateModelRunDate', u'2009-12-01T00:00:00Z'),
 (u'DODS.strlen', 0)]

In [144]: ncsoil.variables
Out[146]: OrderedDict([(u'time', <netCDF4.Variable object at 0x10c93c6d8>), (u'lat', <netCDF4.Variable object at 0x10c93c770>), (u'gaussw', <netCDF4.Variable object at 0x10c93c808>), (u'lon', <netCDF4.Variable object at 0x10c93c8a0>), (u'latLonCoordSys', <netCDF4.Variable object at 0x10c93c938>), (u'depth_below_surface_layer', <netCDF4.Variable object at 0x10c93c9d0>), (u'depth_below_surface_layer_bounds', <netCDF4.Variable object at 0x10c93ca68>), (u'Volumetric_Soil_Moisture_Content', <netCDF4.Variable object at 0x10c93cb00>)])

In [147]: ncsoil.variables['lat'].shape
Out[147]: (94,)

In [148]: ncsoil.variables['lat'][:]
Out[148]:
array([ 88.54195014,  86.65316717,  84.75322993,  82.85077247,
        80.94735904,  79.04348303,  77.13934851,  75.23505502,
        73.33065686,  71.42618613,  69.52166306,  67.61710099,
        65.71250909,  63.80789388,  61.90326011,  59.99861132,
        58.09395022,  56.18927891,  54.28459903,  52.3799119 ,
        50.47521859,  48.57051996,  46.66581674,  44.76110953,
        42.85639882,  40.95168505,  39.04696859,  37.14224973,
        35.23752876,  33.33280591,  31.42808139,  29.52335539,
        27.61862805,  25.71389953,  23.80916996,  21.90443946,
        19.99970812,  18.09497606,  16.19024335,  14.28551009,
        12.38077635,  10.47604219,   8.5713077 ,   6.66657293,
         4.76183796,   2.85710283,   0.95236762,  -0.95236762,
        -2.85710283,  -4.76183796,  -6.66657293,  -8.5713077 ,
       -10.47604219, -12.38077635, -14.28551009, -16.19024335,
       -18.09497606, -19.99970812, -21.90443946, -23.80916996,
       -25.71389953, -27.61862805, -29.52335539, -31.42808139,
       -33.33280591, -35.23752876, -37.14224973, -39.04696859,
       -40.95168505, -42.85639882, -44.76110953, -46.66581674,
       -48.57051996, -50.47521859, -52.3799119 , -54.28459903,
       -56.18927891, -58.09395022, -59.99861132, -61.90326011,
       -63.80789388, -65.71250909, -67.61710099, -69.52166306,
       -71.42618613, -73.33065686, -75.23505502, -77.13934851,
       -79.04348303, -80.94735904, -82.85077247, -84.75322993,
       -86.65316717, -88.54195014])

In [149]: ncsoil.close()

In [150]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm4.gdas.200912.grb2

In [151]: [(a, ncsoil.getncattr(a)) for a in ncsoil.ncattrs()]
Out[151]:
[(u'Conventions', u'CF-1.4'),
 (u'Originating_center', u'US National Weather Service - NCEP(WMC) (7)'),
 (u'Generating_Model', u'Analysis from Global Data Assimilation System'),
 (u'Product_Status', u'Operational products'),
 (u'Product_Type', u'Forecast products'),
 (u'title',
  u'US National Weather Service - NCEP(WMC) Analysis from Global Data Assimilation System Forecast products'),
 (u'institution', u'Center US National Weather Service - NCEP(WMC) (7)'),
 (u'source', u'Type: Forecast products Status: Operational products'),
 (u'history', u'Direct read of GRIB-2 into NetCDF-Java 4 API'),
 (u'CF%3afeature_type', u'GRID'),
 (u'file_format', u'GRIB-2'),
 (u'location',
  u'/nomads3_data/raid2/noaaport/merged/cfsrr/200912/soilm4.gdas.200912.grb2'),
 (u'_CoordinateModelRunDate', u'2009-12-01T00:00:00Z'),
 (u'DODS.strlen', 0)]

In [152]: ncsoil.variables
Out[154]: OrderedDict([(u'time', <netCDF4.Variable object at 0x10c93ce90>), (u'lat', <netCDF4.Variable object at 0x10c93cf28>), (u'gaussw', <netCDF4.Variable object at 0x10cfa4050>), (u'lon', <netCDF4.Variable object at 0x10cfa40e8>), (u'latLonCoordSys', <netCDF4.Variable object at 0x10cfa4180>), (u'depth_below_surface_layer', <netCDF4.Variable object at 0x10cfa4218>), (u'depth_below_surface_layer_bounds', <netCDF4.Variable object at 0x10cfa42b0>), (u'Volumetric_Soil_Moisture_Content', <netCDF4.Variable object at 0x10cfa4348>)])

In [155]: ncsoil.variables['Volumetric_Soil_Moisture_Content'].shape
Out[155]: (745, 1, 576, 1152)

In [156]: ncsoil.variables['time'].shape
Out[156]: (745,)

In [157]: ncsoil.variables['time'][:4]
Out[157]: array([0, 1, 2, 3], dtype=int32)

In [158]: 31 * 24
Out[158]: 744

In [159]: ncsoil.variables['lat'].shape
Out[159]: (576,)

In [160]: ncsoil.variables['lat'][:]
Out[160]:
array([ 89.76099781,  89.45138398,  89.13994449,  88.82809185,
        88.51608246,  88.20399728,  87.89186973,  87.57971611,
        87.26754532,  86.95536264,  86.64317137,  86.3309737 ,
        86.01877113,  85.70656473,  85.39435528,  85.08214336,
        84.76992941,  84.45771378,  84.14549672,  83.83327847,
        83.52105918,  83.20883901,  82.89661807,  82.58439646,
        82.27217426,  81.95995153,  81.64772834,  81.33550474,
        81.02328077,  80.71105646,  80.39883185,  80.08660697,
        79.77438185,  79.4621565 ,  79.14993094,  78.83770519,
        78.52547927,  78.2132532 ,  77.90102697,  77.58880061,
        77.27657412,  76.96434752,  76.6521208 ,  76.33989399,
        76.02766708,  75.71544008,  75.403213  ,  75.09098585,
        74.77875862,  74.46653132,  74.15430396,  73.84207654,
        73.52984906,  73.21762152,  72.90539394,  72.5931663 ,
        72.28093863,  71.96871091,  71.65648314,  71.34425534,
        71.0320275 ,  70.71979963,  70.40757172,  70.09534378,
        69.78311581,  69.47088781,  69.15865979,  68.84643173,
        68.53420365,  68.22197555,  67.90974743,  67.59751928,
        67.28529111,  66.97306292,  66.66083471,  66.34860648,
        66.03637823,  65.72414997,  65.41192168,  65.09969339,
        64.78746507,  64.47523674,  64.1630084 ,  63.85078005,
        63.53855168,  63.22632329,  62.9140949 ,  62.60186649,
        62.28963807,  61.97740964,  61.6651812 ,  61.35295275,
        61.04072429,  60.72849581,  60.41626733,  60.10403884,
        59.79181034,  59.47958183,  59.16735332,  58.85512479,
        58.54289626,  58.23066772,  57.91843917,  57.60621062,
        57.29398205,  56.98175348,  56.66952491,  56.35729633,
        56.04506774,  55.73283914,  55.42061054,  55.10838194,
        54.79615332,  54.48392471,  54.17169608,  53.85946746,
        53.54723882,  53.23501019,  52.92278154,  52.6105529 ,
        52.29832425,  51.98609559,  51.67386693,  51.36163826,
        51.0494096 ,  50.73718092,  50.42495225,  50.11272357,
        49.80049488,  49.48826619,  49.1760375 ,  48.86380881,
        48.55158011,  48.23935141,  47.9271227 ,  47.61489399,
        47.30266528,  46.99043657,  46.67820785,  46.36597913,
        46.05375041,  45.74152168,  45.42929296,  45.11706423,
        44.80483549,  44.49260676,  44.18037802,  43.86814928,
        43.55592053,  43.24369179,  42.93146304,  42.61923429,
        42.30700554,  41.99477678,  41.68254803,  41.37031927,
        41.05809051,  40.74586175,  40.43363298,  40.12140422,
        39.80917545,  39.49694668,  39.18471791,  38.87248913,
        38.56026036,  38.24803158,  37.9358028 ,  37.62357402,
        37.31134524,  36.99911646,  36.68688767,  36.37465889,
        36.0624301 ,  35.75020131,  35.43797252,  35.12574373,
        34.81351494,  34.50128614,  34.18905735,  33.87682855,
        33.56459975,  33.25237095,  32.94014215,  32.62791335,
        32.31568455,  32.00345574,  31.69122694,  31.37899813,
        31.06676932,  30.75454052,  30.44231171,  30.1300829 ,
        29.81785409,  29.50562527,  29.19339646,  28.88116765,
        28.56893883,  28.25671001,  27.9444812 ,  27.63225238,
        27.32002356,  27.00779474,  26.69556592,  26.3833371 ,
        26.07110828,  25.75887945,  25.44665063,  25.13442181,
        24.82219298,  24.50996416,  24.19773533,  23.8855065 ,
        23.57327767,  23.26104885,  22.94882002,  22.63659119,
        22.32436236,  22.01213353,  21.69990469,  21.38767586,
        21.07544703,  20.7632182 ,  20.45098936,  20.13876053,
        19.82653169,  19.51430286,  19.20207402,  18.88984518,
        18.57761635,  18.26538751,  17.95315867,  17.64092983,
        17.328701  ,  17.01647216,  16.70424332,  16.39201448,
        16.07978564,  15.76755679,  15.45532795,  15.14309911,
        14.83087027,  14.51864143,  14.20641258,  13.89418374,
        13.5819549 ,  13.26972605,  12.95749721,  12.64526837,
        12.33303952,  12.02081068,  11.70858183,  11.39635299,
        11.08412414,  10.77189529,  10.45966645,  10.1474376 ,
         9.83520875,   9.52297991,   9.21075106,   8.89852221,
         8.58629336,   8.27406452,   7.96183567,   7.64960682,
         7.33737797,   7.02514912,   6.71292027,   6.40069142,
         6.08846258,   5.77623373,   5.46400488,   5.15177603,
         4.83954718,   4.52731833,   4.21508948,   3.90286063,
         3.59063178,   3.27840293,   2.96617408,   2.65394523,
         2.34171638,   2.02948753,   1.71725868,   1.40502983,
         1.09280098,   0.78057213,   0.46834328,   0.15611443,
        -0.15611443,  -0.46834328,  -0.78057213,  -1.09280098,
        -1.40502983,  -1.71725868,  -2.02948753,  -2.34171638,
        -2.65394523,  -2.96617408,  -3.27840293,  -3.59063178,
        -3.90286063,  -4.21508948,  -4.52731833,  -4.83954718,
        -5.15177603,  -5.46400488,  -5.77623373,  -6.08846258,
        -6.40069142,  -6.71292027,  -7.02514912,  -7.33737797,
        -7.64960682,  -7.96183567,  -8.27406452,  -8.58629336,
        -8.89852221,  -9.21075106,  -9.52297991,  -9.83520875,
       -10.1474376 , -10.45966645, -10.77189529, -11.08412414,
       -11.39635299, -11.70858183, -12.02081068, -12.33303952,
       -12.64526837, -12.95749721, -13.26972605, -13.5819549 ,
       -13.89418374, -14.20641258, -14.51864143, -14.83087027,
       -15.14309911, -15.45532795, -15.76755679, -16.07978564,
       -16.39201448, -16.70424332, -17.01647216, -17.328701  ,
       -17.64092983, -17.95315867, -18.26538751, -18.57761635,
       -18.88984518, -19.20207402, -19.51430286, -19.82653169,
       -20.13876053, -20.45098936, -20.7632182 , -21.07544703,
       -21.38767586, -21.69990469, -22.01213353, -22.32436236,
       -22.63659119, -22.94882002, -23.26104885, -23.57327767,
       -23.8855065 , -24.19773533, -24.50996416, -24.82219298,
       -25.13442181, -25.44665063, -25.75887945, -26.07110828,
       -26.3833371 , -26.69556592, -27.00779474, -27.32002356,
       -27.63225238, -27.9444812 , -28.25671001, -28.56893883,
       -28.88116765, -29.19339646, -29.50562527, -29.81785409,
       -30.1300829 , -30.44231171, -30.75454052, -31.06676932,
       -31.37899813, -31.69122694, -32.00345574, -32.31568455,
       -32.62791335, -32.94014215, -33.25237095, -33.56459975,
       -33.87682855, -34.18905735, -34.50128614, -34.81351494,
       -35.12574373, -35.43797252, -35.75020131, -36.0624301 ,
       -36.37465889, -36.68688767, -36.99911646, -37.31134524,
       -37.62357402, -37.9358028 , -38.24803158, -38.56026036,
       -38.87248913, -39.18471791, -39.49694668, -39.80917545,
       -40.12140422, -40.43363298, -40.74586175, -41.05809051,
       -41.37031927, -41.68254803, -41.99477678, -42.30700554,
       -42.61923429, -42.93146304, -43.24369179, -43.55592053,
       -43.86814928, -44.18037802, -44.49260676, -44.80483549,
       -45.11706423, -45.42929296, -45.74152168, -46.05375041,
       -46.36597913, -46.67820785, -46.99043657, -47.30266528,
       -47.61489399, -47.9271227 , -48.23935141, -48.55158011,
       -48.86380881, -49.1760375 , -49.48826619, -49.80049488,
       -50.11272357, -50.42495225, -50.73718092, -51.0494096 ,
       -51.36163826, -51.67386693, -51.98609559, -52.29832425,
       -52.6105529 , -52.92278154, -53.23501019, -53.54723882,
       -53.85946746, -54.17169608, -54.48392471, -54.79615332,
       -55.10838194, -55.42061054, -55.73283914, -56.04506774,
       -56.35729633, -56.66952491, -56.98175348, -57.29398205,
       -57.60621062, -57.91843917, -58.23066772, -58.54289626,
       -58.85512479, -59.16735332, -59.47958183, -59.79181034,
       -60.10403884, -60.41626733, -60.72849581, -61.04072429,
       -61.35295275, -61.6651812 , -61.97740964, -62.28963807,
       -62.60186649, -62.9140949 , -63.22632329, -63.53855168,
       -63.85078005, -64.1630084 , -64.47523674, -64.78746507,
       -65.09969339, -65.41192168, -65.72414997, -66.03637823,
       -66.34860648, -66.66083471, -66.97306292, -67.28529111,
       -67.59751928, -67.90974743, -68.22197555, -68.53420365,
       -68.84643173, -69.15865979, -69.47088781, -69.78311581,
       -70.09534378, -70.40757172, -70.71979963, -71.0320275 ,
       -71.34425534, -71.65648314, -71.96871091, -72.28093863,
       -72.5931663 , -72.90539394, -73.21762152, -73.52984906,
       -73.84207654, -74.15430396, -74.46653132, -74.77875862,
       -75.09098585, -75.403213  , -75.71544008, -76.02766708,
       -76.33989399, -76.6521208 , -76.96434752, -77.27657412,
       -77.58880061, -77.90102697, -78.2132532 , -78.52547927,
       -78.83770519, -79.14993094, -79.4621565 , -79.77438185,
       -80.08660697, -80.39883185, -80.71105646, -81.02328077,
       -81.33550474, -81.64772834, -81.95995153, -82.27217426,
       -82.58439646, -82.89661807, -83.20883901, -83.52105918,
       -83.83327847, -84.14549672, -84.45771378, -84.76992941,
       -85.08214336, -85.39435528, -85.70656473, -86.01877113,
       -86.3309737 , -86.64317137, -86.95536264, -87.26754532,
       -87.57971611, -87.89186973, -88.20399728, -88.51608246,
       -88.82809185, -89.13994449, -89.45138398, -89.76099781])

In [161]: ncsoil.dimensions
Out[161]: OrderedDict([(u'bounds_dim', <netCDF4.Dimension object at 0x10c941b90>), (u'depth_below_surface_layer', <netCDF4.Dimension object at 0x10c941f50>), (u'lat', <netCDF4.Dimension object at 0x10c941fa0>), (u'lon', <netCDF4.Dimension object at 0x10cfb4050>), (u'maxStrlen64', <netCDF4.Dimension object at 0x10cfb40a0>), (u'time', <netCDF4.Dimension object at 0x10cfb40f0>)])

In [162]: ncsoil.dimensions['depth_below_surface_layer']
Out[165]: <netCDF4.Dimension at 0x10c941f50>

In [166]: len(ncsoil.dimensions['depth_below_surface_layer'])
Out[166]: 1

In [167]: ncsoil.dimensions['depth_below_surface_layer'][:]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-167-c99172836b5d> in <module>()
----> 1 ncsoil.dimensions['depth_below_surface_layer'][:]

TypeError: 'netCDF4.Dimension' object has no attribute '__getitem__'

In [168]: ncsoil.variables
Out[170]: OrderedDict([(u'time', <netCDF4.Variable object at 0x10c93ce90>), (u'lat', <netCDF4.Variable object at 0x10c93cf28>), (u'gaussw', <netCDF4.Variable object at 0x10cfa4050>), (u'lon', <netCDF4.Variable object at 0x10cfa40e8>), (u'latLonCoordSys', <netCDF4.Variable object at 0x10cfa4180>), (u'depth_below_surface_layer', <netCDF4.Variable object at 0x10cfa4218>), (u'depth_below_surface_layer_bounds', <netCDF4.Variable object at 0x10cfa42b0>), (u'Volumetric_Soil_Moisture_Content', <netCDF4.Variable object at 0x10cfa4348>)])

In [171]: ncsoil.variables['depth_below_surface_layer']
Out[171]: <netCDF4.Variable at 0x10cfa4218>

In [172]: ncsoil.variables['depth_below_surface_layer'][:]
Out[172]: array([ 1.5])

In [173]: ncsoil.close()

In [174]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm0.gdas.200912.grb2
syntax error, unexpected WORD_STRING, expecting WORD_WORD
context: Error { code = 404; message = "cfsr1hr/200912/soilm0.gdas.200912.grb2"^;};
error reading file

In [175]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm1.gdas.200912.grb2

In [176]: ncsoil.variables['depth_below_surface_layer'][:]
Out[176]: array([ 0.05])

In [177]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm1.gdas200912.grb2
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py in <module>()
     65     url_Tsoil = NomadsURLFormatter(time, 'soilt1')
     66
---> 67     ncVWC = read_URL(url_VWC)
     68     ncTsoil = read_URL(url_Tsoil)
     69

/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py in read_URL(URL)
     53     print(URL)
     54     try:
---> 55         nc = netCDF4.Dataset(URL)
     56         return(nc)
     57     except RuntimeError:

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Dataset.__init__ (netCDF4.c:19103)()

TypeError: expected string or Unicode object, NomadsURLFormatter found

In [178]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm1.gdas200912.grb2
syntax error, unexpected WORD_STRING, expecting WORD_WORD
context: Error { code = 404; message = "cfsr1hr/200912/soilm1.gdas200912.grb2"^;};
error reading file
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilt1.gdas200912.grb2
syntax error, unexpected WORD_STRING, expecting WORD_WORD
context: Error { code = 404; message = "cfsr1hr/200912/soilt1.gdas200912.grb2"^;};
error reading file

In [179]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm1.gdas.200912.grb2
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilt1.gdas.200912.grb2


In [180]:
In [180]: ncVWC.variables
Out[180]: OrderedDict([(u'time', <netCDF4.Variable object at 0x10c93c3e0>), (u'lat', <netCDF4.Variable object at 0x10c93c478>), (u'gaussw', <netCDF4.Variable object at 0x10cfa4478>), (u'lon', <netCDF4.Variable object at 0x10cfa45a8>), (u'latLonCoordSys', <netCDF4.Variable object at 0x10cfa4d60>), (u'depth_below_surface_layer', <netCDF4.Variable object at 0x10cfa4df8>), (u'depth_below_surface_layer_bounds', <netCDF4.Variable object at 0x10cfa4e90>), (u'Volumetric_Soil_Moisture_Content', <netCDF4.Variable object at 0x10cfa4f28>)])

In [181]: run tim_OPeNDAP_test.py
  File "/Users/tim/work/Code/2015-03_SoilDataForMary/tim_OPeNDAP_test.py", line 56
    def read_URL(URL):
                      ^
IndentationError: expected an indented block


In [182]: run tim_OPeNDAP_test.py
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilm1.gdas.200912.grb2
http://nomads.ncdc.noaa.gov/thredds/dodsC/cfsr1hr/200912/soilt1.gdas.200912.grb2

In [183]: run CFSR_site_extractor.py
  File "/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py", line 87
    self.lat = nc.variables['lat'][:]
             ^
SyntaxError: invalid syntax


In [186]: prun CFSR_site_extractor.py
  File "/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py", line 96
    def find_le(a, x):
      ^
IndentationError: expected an indented block


In [187]: run CFSR_site_extractor.py
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in <module>()
    125     sites = [SoilSite(*k) for k in zip(names, lats, lons)]
    126
--> 127     lon, lat = get_T362_lon_lat()
    128
    129     # time = '200912'

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in get_T362_lon_lat()
     16     URL = Nomads_CFSR_HourlyTS_URL('200807', 'soilm1')
     17     try:
---> 18         nc = netCDF4.Dataset(URL)
     19         lon = nc.variables['lon'][:]
     20         lat = nc.variables['lat'][:]

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/netCDF4.so in netCDF4.Dataset.__init__ (netCDF4.c:19103)()

TypeError: expected string or Unicode object, Nomads_CFSR_HourlyTS_URL found

In [188]: run CFSR_site_extractor.py

In [189]: lon
Out[189]:
array([  0.00000000e+00,   3.12499576e-01,   6.24999152e-01, ...,
         3.59062013e+02,   3.59374512e+02,   3.59687012e+02])

In [190]: lon.shape
Out[190]: (1152,)

In [191]: lat.shape
Out[191]: (576,)

In [192]: run CFSR_site_extractor.py
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in <module>()
    132
    133     sites = [SoilSite(*k).get_T362_x_y(T362_lon, T362_lat) for k in
--> 134              zip(names, lats, lons)]
    135
    136

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in get_T362_x_y(self, T362_lat, T362_lon)
     53         the CFSR Guassian T362 grid.
     54         """
---> 55         self.T362_x = find_le(T362_lon, self.lon)
     56         self.T362_y = find_le(T362_lat, self.lat)
     57         return(self)

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in find_le(a, x)
     15     if i:
     16         return a[i-1]
---> 17     raise ValueError
     18
     19

ValueError:

In [193]: pdb
Automatic pdb calling has been turned ON

In [194]: run CFSR_site_extractor.py
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in <module>()
    132
    133     sites = [SoilSite(*k).get_T362_x_y(T362_lon, T362_lat) for k in
--> 134              zip(names, lats, lons)]
    135
    136

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in get_T362_x_y(self, T362_lat, T362_lon)
     53         the CFSR Guassian T362 grid.
     54         """
---> 55         self.T362_x = find_le(T362_lon, self.lon)
     56         self.T362_y = find_le(T362_lat, self.lat)
     57         return(self)

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in find_le(a, x)
     15     if i:
     16         return a[i-1]
---> 17     raise ValueError
     18
     19

ValueError:
> /Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py(17)find_le()
     16         return a[i-1]
---> 17     raise ValueError
     18

ipdb> i
0
ipdb> a
a = [ 89.76099781  89.45138398  89.13994449  88.82809185  88.51608246
  88.20399728  87.89186973  87.57971611  87.26754532  86.95536264
  86.64317137  86.3309737   86.01877113  85.70656473  85.39435528
  85.08214336  84.76992941  84.45771378  84.14549672  83.83327847
  83.52105918  83.20883901  82.89661807  82.58439646  82.27217426
  81.95995153  81.64772834  81.33550474  81.02328077  80.71105646
  80.39883185  80.08660697  79.77438185  79.4621565   79.14993094
  78.83770519  78.52547927  78.2132532   77.90102697  77.58880061
  77.27657412  76.96434752  76.6521208   76.33989399  76.02766708
  75.71544008  75.403213    75.09098585  74.77875862  74.46653132
  74.15430396  73.84207654  73.52984906  73.21762152  72.90539394
  72.5931663   72.28093863  71.96871091  71.65648314  71.34425534
  71.0320275   70.71979963  70.40757172  70.09534378  69.78311581
  69.47088781  69.15865979  68.84643173  68.53420365  68.22197555
  67.90974743  67.59751928  67.28529111  66.97306292  66.66083471
  66.34860648  66.03637823  65.72414997  65.41192168  65.09969339
  64.78746507  64.47523674  64.1630084   63.85078005  63.53855168
  63.22632329  62.9140949   62.60186649  62.28963807  61.97740964
  61.6651812   61.35295275  61.04072429  60.72849581  60.41626733
  60.10403884  59.79181034  59.47958183  59.16735332  58.85512479
  58.54289626  58.23066772  57.91843917  57.60621062  57.29398205
  56.98175348  56.66952491  56.35729633  56.04506774  55.73283914
  55.42061054  55.10838194  54.79615332  54.48392471  54.17169608
  53.85946746  53.54723882  53.23501019  52.92278154  52.6105529
  52.29832425  51.98609559  51.67386693  51.36163826  51.0494096
  50.73718092  50.42495225  50.11272357  49.80049488  49.48826619
  49.1760375   48.86380881  48.55158011  48.23935141  47.9271227
  47.61489399  47.30266528  46.99043657  46.67820785  46.36597913
  46.05375041  45.74152168  45.42929296  45.11706423  44.80483549
  44.49260676  44.18037802  43.86814928  43.55592053  43.24369179
  42.93146304  42.61923429  42.30700554  41.99477678  41.68254803
  41.37031927  41.05809051  40.74586175  40.43363298  40.12140422
  39.80917545  39.49694668  39.18471791  38.87248913  38.56026036
  38.24803158  37.9358028   37.62357402  37.31134524  36.99911646
  36.68688767  36.37465889  36.0624301   35.75020131  35.43797252
  35.12574373  34.81351494  34.50128614  34.18905735  33.87682855
  33.56459975  33.25237095  32.94014215  32.62791335  32.31568455
  32.00345574  31.69122694  31.37899813  31.06676932  30.75454052
  30.44231171  30.1300829   29.81785409  29.50562527  29.19339646
  28.88116765  28.56893883  28.25671001  27.9444812   27.63225238
  27.32002356  27.00779474  26.69556592  26.3833371   26.07110828
  25.75887945  25.44665063  25.13442181  24.82219298  24.50996416
  24.19773533  23.8855065   23.57327767  23.26104885  22.94882002
  22.63659119  22.32436236  22.01213353  21.69990469  21.38767586
  21.07544703  20.7632182   20.45098936  20.13876053  19.82653169
  19.51430286  19.20207402  18.88984518  18.57761635  18.26538751
  17.95315867  17.64092983  17.328701    17.01647216  16.70424332
  16.39201448  16.07978564  15.76755679  15.45532795  15.14309911
  14.83087027  14.51864143  14.20641258  13.89418374  13.5819549
  13.26972605  12.95749721  12.64526837  12.33303952  12.02081068
  11.70858183  11.39635299  11.08412414  10.77189529  10.45966645
  10.1474376    9.83520875   9.52297991   9.21075106   8.89852221
   8.58629336   8.27406452   7.96183567   7.64960682   7.33737797
   7.02514912   6.71292027   6.40069142   6.08846258   5.77623373
   5.46400488   5.15177603   4.83954718   4.52731833   4.21508948
   3.90286063   3.59063178   3.27840293   2.96617408   2.65394523
   2.34171638   2.02948753   1.71725868   1.40502983   1.09280098
   0.78057213   0.46834328   0.15611443  -0.15611443  -0.46834328
  -0.78057213  -1.09280098  -1.40502983  -1.71725868  -2.02948753
  -2.34171638  -2.65394523  -2.96617408  -3.27840293  -3.59063178
  -3.90286063  -4.21508948  -4.52731833  -4.83954718  -5.15177603
  -5.46400488  -5.77623373  -6.08846258  -6.40069142  -6.71292027
  -7.02514912  -7.33737797  -7.64960682  -7.96183567  -8.27406452
  -8.58629336  -8.89852221  -9.21075106  -9.52297991  -9.83520875
 -10.1474376  -10.45966645 -10.77189529 -11.08412414 -11.39635299
 -11.70858183 -12.02081068 -12.33303952 -12.64526837 -12.95749721
 -13.26972605 -13.5819549  -13.89418374 -14.20641258 -14.51864143
 -14.83087027 -15.14309911 -15.45532795 -15.76755679 -16.07978564
 -16.39201448 -16.70424332 -17.01647216 -17.328701   -17.64092983
 -17.95315867 -18.26538751 -18.57761635 -18.88984518 -19.20207402
 -19.51430286 -19.82653169 -20.13876053 -20.45098936 -20.7632182
 -21.07544703 -21.38767586 -21.69990469 -22.01213353 -22.32436236
 -22.63659119 -22.94882002 -23.26104885 -23.57327767 -23.8855065
 -24.19773533 -24.50996416 -24.82219298 -25.13442181 -25.44665063
 -25.75887945 -26.07110828 -26.3833371  -26.69556592 -27.00779474
 -27.32002356 -27.63225238 -27.9444812  -28.25671001 -28.56893883
 -28.88116765 -29.19339646 -29.50562527 -29.81785409 -30.1300829
 -30.44231171 -30.75454052 -31.06676932 -31.37899813 -31.69122694
 -32.00345574 -32.31568455 -32.62791335 -32.94014215 -33.25237095
 -33.56459975 -33.87682855 -34.18905735 -34.50128614 -34.81351494
 -35.12574373 -35.43797252 -35.75020131 -36.0624301  -36.37465889
 -36.68688767 -36.99911646 -37.31134524 -37.62357402 -37.9358028
 -38.24803158 -38.56026036 -38.87248913 -39.18471791 -39.49694668
 -39.80917545 -40.12140422 -40.43363298 -40.74586175 -41.05809051
 -41.37031927 -41.68254803 -41.99477678 -42.30700554 -42.61923429
 -42.93146304 -43.24369179 -43.55592053 -43.86814928 -44.18037802
 -44.49260676 -44.80483549 -45.11706423 -45.42929296 -45.74152168
 -46.05375041 -46.36597913 -46.67820785 -46.99043657 -47.30266528
 -47.61489399 -47.9271227  -48.23935141 -48.55158011 -48.86380881
 -49.1760375  -49.48826619 -49.80049488 -50.11272357 -50.42495225
 -50.73718092 -51.0494096  -51.36163826 -51.67386693 -51.98609559
 -52.29832425 -52.6105529  -52.92278154 -53.23501019 -53.54723882
 -53.85946746 -54.17169608 -54.48392471 -54.79615332 -55.10838194
 -55.42061054 -55.73283914 -56.04506774 -56.35729633 -56.66952491
 -56.98175348 -57.29398205 -57.60621062 -57.91843917 -58.23066772
 -58.54289626 -58.85512479 -59.16735332 -59.47958183 -59.79181034
 -60.10403884 -60.41626733 -60.72849581 -61.04072429 -61.35295275
 -61.6651812  -61.97740964 -62.28963807 -62.60186649 -62.9140949
 -63.22632329 -63.53855168 -63.85078005 -64.1630084  -64.47523674
 -64.78746507 -65.09969339 -65.41192168 -65.72414997 -66.03637823
 -66.34860648 -66.66083471 -66.97306292 -67.28529111 -67.59751928
 -67.90974743 -68.22197555 -68.53420365 -68.84643173 -69.15865979
 -69.47088781 -69.78311581 -70.09534378 -70.40757172 -70.71979963
 -71.0320275  -71.34425534 -71.65648314 -71.96871091 -72.28093863
 -72.5931663  -72.90539394 -73.21762152 -73.52984906 -73.84207654
 -74.15430396 -74.46653132 -74.77875862 -75.09098585 -75.403213
 -75.71544008 -76.02766708 -76.33989399 -76.6521208  -76.96434752
 -77.27657412 -77.58880061 -77.90102697 -78.2132532  -78.52547927
 -78.83770519 -79.14993094 -79.4621565  -79.77438185 -80.08660697
 -80.39883185 -80.71105646 -81.02328077 -81.33550474 -81.64772834
 -81.95995153 -82.27217426 -82.58439646 -82.89661807 -83.20883901
 -83.52105918 -83.83327847 -84.14549672 -84.45771378 -84.76992941
 -85.08214336 -85.39435528 -85.70656473 -86.01877113 -86.3309737
 -86.64317137 -86.95536264 -87.26754532 -87.57971611 -87.89186973
 -88.20399728 -88.51608246 -88.82809185 -89.13994449 -89.45138398
 -89.76099781]
x = -88.2904
ipdb> x
-88.2904
ipdb> np.searchsorted(a, x, sorter=np.arange(len(a)[:-1:1])
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> np.searchsorted(a, x, sorter=np.arange(len(a)[:-1:1]))
*** TypeError: 'int' object has no attribute '__getitem__'
ipdb> np.arange(len(a)[:-1:1])
*** TypeError: 'int' object has no attribute '__getitem__'
ipdb> np.arange(len(a))
array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
       247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
       273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
       286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
       299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
       312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
       325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
       338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,
       351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
       364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
       377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
       390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,
       403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
       416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
       429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
       442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
       455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
       468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
       481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
       494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
       507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
       520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
       533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
       546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
       559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
       572, 573, 574, 575])
ipdb> np.arange(len(a)[-1:-1:1]
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> np.arange(len(a)[-1:-1:0]
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> np.arange(len(a)[500:0]
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> np.arange(len(a)[::-1
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> np.arange(len(a)[::-1]
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> (np.arange(len(a))[::-1]
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> foo = np.arange(len(a)
*** SyntaxError: unexpected EOF while parsing (<stdin>, line 1)
ipdb> foo = np.arange(len(a))
ipdb> foo[::-1]
array([575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563,
       562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550,
       549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537,
       536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524,
       523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511,
       510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498,
       497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485,
       484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472,
       471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459,
       458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446,
       445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433,
       432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420,
       419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407,
       406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394,
       393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381,
       380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368,
       367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355,
       354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342,
       341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329,
       328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316,
       315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303,
       302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290,
       289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277,
       276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264,
       263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251,
       250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238,
       237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225,
       224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212,
       211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199,
       198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186,
       185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173,
       172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160,
       159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147,
       146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134,
       133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121,
       120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108,
       107, 106, 105, 104, 103, 102, 101, 100,  99,  98,  97,  96,  95,
        94,  93,  92,  91,  90,  89,  88,  87,  86,  85,  84,  83,  82,
        81,  80,  79,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,
        68,  67,  66,  65,  64,  63,  62,  61,  60,  59,  58,  57,  56,
        55,  54,  53,  52,  51,  50,  49,  48,  47,  46,  45,  44,  43,
        42,  41,  40,  39,  38,  37,  36,  35,  34,  33,  32,  31,  30,
        29,  28,  27,  26,  25,  24,  23,  22,  21,  20,  19,  18,  17,
        16,  15,  14,  13,  12,  11,  10,   9,   8,   7,   6,   5,   4,
         3,   2,   1,   0])
ipdb> foo = np.arange(len(a))[::-1]
ipdb> foo
*** output flushed ***
ipdb> np.arange(len(a))[::-1]
array([575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563,
       562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550,
       549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537,
       536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524,
       523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511,
       510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498,
       497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485,
       484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472,
       471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459,
       458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446,
       445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433,
       432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420,
       419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407,
       406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394,
       393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381,
       380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368,
       367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355,
       354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342,
       341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329,
       328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316,
       315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303,
       302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290,
       289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277,
       276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264,
       263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251,
       250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238,
       237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225,
       224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212,
       211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199,
       198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186,
       185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173,
       172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160,
       159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147,
       146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134,
       133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121,
       120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108,
       107, 106, 105, 104, 103, 102, 101, 100,  99,  98,  97,  96,  95,
        94,  93,  92,  91,  90,  89,  88,  87,  86,  85,  84,  83,  82,
        81,  80,  79,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,
        68,  67,  66,  65,  64,  63,  62,  61,  60,  59,  58,  57,  56,
        55,  54,  53,  52,  51,  50,  49,  48,  47,  46,  45,  44,  43,
        42,  41,  40,  39,  38,  37,  36,  35,  34,  33,  32,  31,  30,
        29,  28,  27,  26,  25,  24,  23,  22,  21,  20,  19,  18,  17,
        16,  15,  14,  13,  12,  11,  10,   9,   8,   7,   6,   5,   4,
         3,   2,   1,   0])
ipdb> np.searchsorted(a, x, sorter=np.arange(len(a))[::-1])
5
ipdb> x
-88.2904
ipdb> a
a = [ 89.76099781  89.45138398  89.13994449  88.82809185  88.51608246
  88.20399728  87.89186973  87.57971611  87.26754532  86.95536264
  86.64317137  86.3309737   86.01877113  85.70656473  85.39435528
  85.08214336  84.76992941  84.45771378  84.14549672  83.83327847
  83.52105918  83.20883901  82.89661807  82.58439646  82.27217426
  81.95995153  81.64772834  81.33550474  81.02328077  80.71105646
  80.39883185  80.08660697  79.77438185  79.4621565   79.14993094
  78.83770519  78.52547927  78.2132532   77.90102697  77.58880061
  77.27657412  76.96434752  76.6521208   76.33989399  76.02766708
  75.71544008  75.403213    75.09098585  74.77875862  74.46653132
  74.15430396  73.84207654  73.52984906  73.21762152  72.90539394
  72.5931663   72.28093863  71.96871091  71.65648314  71.34425534
  71.0320275   70.71979963  70.40757172  70.09534378  69.78311581
  69.47088781  69.15865979  68.84643173  68.53420365  68.22197555
  67.90974743  67.59751928  67.28529111  66.97306292  66.66083471
  66.34860648  66.03637823  65.72414997  65.41192168  65.09969339
  64.78746507  64.47523674  64.1630084   63.85078005  63.53855168
  63.22632329  62.9140949   62.60186649  62.28963807  61.97740964
  61.6651812   61.35295275  61.04072429  60.72849581  60.41626733
  60.10403884  59.79181034  59.47958183  59.16735332  58.85512479
  58.54289626  58.23066772  57.91843917  57.60621062  57.29398205
  56.98175348  56.66952491  56.35729633  56.04506774  55.73283914
  55.42061054  55.10838194  54.79615332  54.48392471  54.17169608
  53.85946746  53.54723882  53.23501019  52.92278154  52.6105529
  52.29832425  51.98609559  51.67386693  51.36163826  51.0494096
  50.73718092  50.42495225  50.11272357  49.80049488  49.48826619
  49.1760375   48.86380881  48.55158011  48.23935141  47.9271227
  47.61489399  47.30266528  46.99043657  46.67820785  46.36597913
  46.05375041  45.74152168  45.42929296  45.11706423  44.80483549
  44.49260676  44.18037802  43.86814928  43.55592053  43.24369179
  42.93146304  42.61923429  42.30700554  41.99477678  41.68254803
  41.37031927  41.05809051  40.74586175  40.43363298  40.12140422
  39.80917545  39.49694668  39.18471791  38.87248913  38.56026036
  38.24803158  37.9358028   37.62357402  37.31134524  36.99911646
  36.68688767  36.37465889  36.0624301   35.75020131  35.43797252
  35.12574373  34.81351494  34.50128614  34.18905735  33.87682855
  33.56459975  33.25237095  32.94014215  32.62791335  32.31568455
  32.00345574  31.69122694  31.37899813  31.06676932  30.75454052
  30.44231171  30.1300829   29.81785409  29.50562527  29.19339646
  28.88116765  28.56893883  28.25671001  27.9444812   27.63225238
  27.32002356  27.00779474  26.69556592  26.3833371   26.07110828
  25.75887945  25.44665063  25.13442181  24.82219298  24.50996416
  24.19773533  23.8855065   23.57327767  23.26104885  22.94882002
  22.63659119  22.32436236  22.01213353  21.69990469  21.38767586
  21.07544703  20.7632182   20.45098936  20.13876053  19.82653169
  19.51430286  19.20207402  18.88984518  18.57761635  18.26538751
  17.95315867  17.64092983  17.328701    17.01647216  16.70424332
  16.39201448  16.07978564  15.76755679  15.45532795  15.14309911
  14.83087027  14.51864143  14.20641258  13.89418374  13.5819549
  13.26972605  12.95749721  12.64526837  12.33303952  12.02081068
  11.70858183  11.39635299  11.08412414  10.77189529  10.45966645
  10.1474376    9.83520875   9.52297991   9.21075106   8.89852221
   8.58629336   8.27406452   7.96183567   7.64960682   7.33737797
   7.02514912   6.71292027   6.40069142   6.08846258   5.77623373
   5.46400488   5.15177603   4.83954718   4.52731833   4.21508948
   3.90286063   3.59063178   3.27840293   2.96617408   2.65394523
   2.34171638   2.02948753   1.71725868   1.40502983   1.09280098
   0.78057213   0.46834328   0.15611443  -0.15611443  -0.46834328
  -0.78057213  -1.09280098  -1.40502983  -1.71725868  -2.02948753
  -2.34171638  -2.65394523  -2.96617408  -3.27840293  -3.59063178
  -3.90286063  -4.21508948  -4.52731833  -4.83954718  -5.15177603
  -5.46400488  -5.77623373  -6.08846258  -6.40069142  -6.71292027
  -7.02514912  -7.33737797  -7.64960682  -7.96183567  -8.27406452
  -8.58629336  -8.89852221  -9.21075106  -9.52297991  -9.83520875
 -10.1474376  -10.45966645 -10.77189529 -11.08412414 -11.39635299
 -11.70858183 -12.02081068 -12.33303952 -12.64526837 -12.95749721
 -13.26972605 -13.5819549  -13.89418374 -14.20641258 -14.51864143
 -14.83087027 -15.14309911 -15.45532795 -15.76755679 -16.07978564
 -16.39201448 -16.70424332 -17.01647216 -17.328701   -17.64092983
 -17.95315867 -18.26538751 -18.57761635 -18.88984518 -19.20207402
 -19.51430286 -19.82653169 -20.13876053 -20.45098936 -20.7632182
 -21.07544703 -21.38767586 -21.69990469 -22.01213353 -22.32436236
 -22.63659119 -22.94882002 -23.26104885 -23.57327767 -23.8855065
 -24.19773533 -24.50996416 -24.82219298 -25.13442181 -25.44665063
 -25.75887945 -26.07110828 -26.3833371  -26.69556592 -27.00779474
 -27.32002356 -27.63225238 -27.9444812  -28.25671001 -28.56893883
 -28.88116765 -29.19339646 -29.50562527 -29.81785409 -30.1300829
 -30.44231171 -30.75454052 -31.06676932 -31.37899813 -31.69122694
 -32.00345574 -32.31568455 -32.62791335 -32.94014215 -33.25237095
 -33.56459975 -33.87682855 -34.18905735 -34.50128614 -34.81351494
 -35.12574373 -35.43797252 -35.75020131 -36.0624301  -36.37465889
 -36.68688767 -36.99911646 -37.31134524 -37.62357402 -37.9358028
 -38.24803158 -38.56026036 -38.87248913 -39.18471791 -39.49694668
 -39.80917545 -40.12140422 -40.43363298 -40.74586175 -41.05809051
 -41.37031927 -41.68254803 -41.99477678 -42.30700554 -42.61923429
 -42.93146304 -43.24369179 -43.55592053 -43.86814928 -44.18037802
 -44.49260676 -44.80483549 -45.11706423 -45.42929296 -45.74152168
 -46.05375041 -46.36597913 -46.67820785 -46.99043657 -47.30266528
 -47.61489399 -47.9271227  -48.23935141 -48.55158011 -48.86380881
 -49.1760375  -49.48826619 -49.80049488 -50.11272357 -50.42495225
 -50.73718092 -51.0494096  -51.36163826 -51.67386693 -51.98609559
 -52.29832425 -52.6105529  -52.92278154 -53.23501019 -53.54723882
 -53.85946746 -54.17169608 -54.48392471 -54.79615332 -55.10838194
 -55.42061054 -55.73283914 -56.04506774 -56.35729633 -56.66952491
 -56.98175348 -57.29398205 -57.60621062 -57.91843917 -58.23066772
 -58.54289626 -58.85512479 -59.16735332 -59.47958183 -59.79181034
 -60.10403884 -60.41626733 -60.72849581 -61.04072429 -61.35295275
 -61.6651812  -61.97740964 -62.28963807 -62.60186649 -62.9140949
 -63.22632329 -63.53855168 -63.85078005 -64.1630084  -64.47523674
 -64.78746507 -65.09969339 -65.41192168 -65.72414997 -66.03637823
 -66.34860648 -66.66083471 -66.97306292 -67.28529111 -67.59751928
 -67.90974743 -68.22197555 -68.53420365 -68.84643173 -69.15865979
 -69.47088781 -69.78311581 -70.09534378 -70.40757172 -70.71979963
 -71.0320275  -71.34425534 -71.65648314 -71.96871091 -72.28093863
 -72.5931663  -72.90539394 -73.21762152 -73.52984906 -73.84207654
 -74.15430396 -74.46653132 -74.77875862 -75.09098585 -75.403213
 -75.71544008 -76.02766708 -76.33989399 -76.6521208  -76.96434752
 -77.27657412 -77.58880061 -77.90102697 -78.2132532  -78.52547927
 -78.83770519 -79.14993094 -79.4621565  -79.77438185 -80.08660697
 -80.39883185 -80.71105646 -81.02328077 -81.33550474 -81.64772834
 -81.95995153 -82.27217426 -82.58439646 -82.89661807 -83.20883901
 -83.52105918 -83.83327847 -84.14549672 -84.45771378 -84.76992941
 -85.08214336 -85.39435528 -85.70656473 -86.01877113 -86.3309737
 -86.64317137 -86.95536264 -87.26754532 -87.57971611 -87.89186973
 -88.20399728 -88.51608246 -88.82809185 -89.13994449 -89.45138398
 -89.76099781]
x = -88.2904
ipdb> rev_idx = np.searchsorted(a, x, sorter=np.arange(len(a))[::-1])
ipdb> idx = len(a) - rev_idx
ipdb> idx
571
ipdb> a[idx-1:]
a = [ 89.76099781  89.45138398  89.13994449  88.82809185  88.51608246
  88.20399728  87.89186973  87.57971611  87.26754532  86.95536264
  86.64317137  86.3309737   86.01877113  85.70656473  85.39435528
  85.08214336  84.76992941  84.45771378  84.14549672  83.83327847
  83.52105918  83.20883901  82.89661807  82.58439646  82.27217426
  81.95995153  81.64772834  81.33550474  81.02328077  80.71105646
  80.39883185  80.08660697  79.77438185  79.4621565   79.14993094
  78.83770519  78.52547927  78.2132532   77.90102697  77.58880061
  77.27657412  76.96434752  76.6521208   76.33989399  76.02766708
  75.71544008  75.403213    75.09098585  74.77875862  74.46653132
  74.15430396  73.84207654  73.52984906  73.21762152  72.90539394
  72.5931663   72.28093863  71.96871091  71.65648314  71.34425534
  71.0320275   70.71979963  70.40757172  70.09534378  69.78311581
  69.47088781  69.15865979  68.84643173  68.53420365  68.22197555
  67.90974743  67.59751928  67.28529111  66.97306292  66.66083471
  66.34860648  66.03637823  65.72414997  65.41192168  65.09969339
  64.78746507  64.47523674  64.1630084   63.85078005  63.53855168
  63.22632329  62.9140949   62.60186649  62.28963807  61.97740964
  61.6651812   61.35295275  61.04072429  60.72849581  60.41626733
  60.10403884  59.79181034  59.47958183  59.16735332  58.85512479
  58.54289626  58.23066772  57.91843917  57.60621062  57.29398205
  56.98175348  56.66952491  56.35729633  56.04506774  55.73283914
  55.42061054  55.10838194  54.79615332  54.48392471  54.17169608
  53.85946746  53.54723882  53.23501019  52.92278154  52.6105529
  52.29832425  51.98609559  51.67386693  51.36163826  51.0494096
  50.73718092  50.42495225  50.11272357  49.80049488  49.48826619
  49.1760375   48.86380881  48.55158011  48.23935141  47.9271227
  47.61489399  47.30266528  46.99043657  46.67820785  46.36597913
  46.05375041  45.74152168  45.42929296  45.11706423  44.80483549
  44.49260676  44.18037802  43.86814928  43.55592053  43.24369179
  42.93146304  42.61923429  42.30700554  41.99477678  41.68254803
  41.37031927  41.05809051  40.74586175  40.43363298  40.12140422
  39.80917545  39.49694668  39.18471791  38.87248913  38.56026036
  38.24803158  37.9358028   37.62357402  37.31134524  36.99911646
  36.68688767  36.37465889  36.0624301   35.75020131  35.43797252
  35.12574373  34.81351494  34.50128614  34.18905735  33.87682855
  33.56459975  33.25237095  32.94014215  32.62791335  32.31568455
  32.00345574  31.69122694  31.37899813  31.06676932  30.75454052
  30.44231171  30.1300829   29.81785409  29.50562527  29.19339646
  28.88116765  28.56893883  28.25671001  27.9444812   27.63225238
  27.32002356  27.00779474  26.69556592  26.3833371   26.07110828
  25.75887945  25.44665063  25.13442181  24.82219298  24.50996416
  24.19773533  23.8855065   23.57327767  23.26104885  22.94882002
  22.63659119  22.32436236  22.01213353  21.69990469  21.38767586
  21.07544703  20.7632182   20.45098936  20.13876053  19.82653169
  19.51430286  19.20207402  18.88984518  18.57761635  18.26538751
  17.95315867  17.64092983  17.328701    17.01647216  16.70424332
  16.39201448  16.07978564  15.76755679  15.45532795  15.14309911
  14.83087027  14.51864143  14.20641258  13.89418374  13.5819549
  13.26972605  12.95749721  12.64526837  12.33303952  12.02081068
  11.70858183  11.39635299  11.08412414  10.77189529  10.45966645
  10.1474376    9.83520875   9.52297991   9.21075106   8.89852221
   8.58629336   8.27406452   7.96183567   7.64960682   7.33737797
   7.02514912   6.71292027   6.40069142   6.08846258   5.77623373
   5.46400488   5.15177603   4.83954718   4.52731833   4.21508948
   3.90286063   3.59063178   3.27840293   2.96617408   2.65394523
   2.34171638   2.02948753   1.71725868   1.40502983   1.09280098
   0.78057213   0.46834328   0.15611443  -0.15611443  -0.46834328
  -0.78057213  -1.09280098  -1.40502983  -1.71725868  -2.02948753
  -2.34171638  -2.65394523  -2.96617408  -3.27840293  -3.59063178
  -3.90286063  -4.21508948  -4.52731833  -4.83954718  -5.15177603
  -5.46400488  -5.77623373  -6.08846258  -6.40069142  -6.71292027
  -7.02514912  -7.33737797  -7.64960682  -7.96183567  -8.27406452
  -8.58629336  -8.89852221  -9.21075106  -9.52297991  -9.83520875
 -10.1474376  -10.45966645 -10.77189529 -11.08412414 -11.39635299
 -11.70858183 -12.02081068 -12.33303952 -12.64526837 -12.95749721
 -13.26972605 -13.5819549  -13.89418374 -14.20641258 -14.51864143
 -14.83087027 -15.14309911 -15.45532795 -15.76755679 -16.07978564
 -16.39201448 -16.70424332 -17.01647216 -17.328701   -17.64092983
 -17.95315867 -18.26538751 -18.57761635 -18.88984518 -19.20207402
 -19.51430286 -19.82653169 -20.13876053 -20.45098936 -20.7632182
 -21.07544703 -21.38767586 -21.69990469 -22.01213353 -22.32436236
 -22.63659119 -22.94882002 -23.26104885 -23.57327767 -23.8855065
 -24.19773533 -24.50996416 -24.82219298 -25.13442181 -25.44665063
 -25.75887945 -26.07110828 -26.3833371  -26.69556592 -27.00779474
 -27.32002356 -27.63225238 -27.9444812  -28.25671001 -28.56893883
 -28.88116765 -29.19339646 -29.50562527 -29.81785409 -30.1300829
 -30.44231171 -30.75454052 -31.06676932 -31.37899813 -31.69122694
 -32.00345574 -32.31568455 -32.62791335 -32.94014215 -33.25237095
 -33.56459975 -33.87682855 -34.18905735 -34.50128614 -34.81351494
 -35.12574373 -35.43797252 -35.75020131 -36.0624301  -36.37465889
 -36.68688767 -36.99911646 -37.31134524 -37.62357402 -37.9358028
 -38.24803158 -38.56026036 -38.87248913 -39.18471791 -39.49694668
 -39.80917545 -40.12140422 -40.43363298 -40.74586175 -41.05809051
 -41.37031927 -41.68254803 -41.99477678 -42.30700554 -42.61923429
 -42.93146304 -43.24369179 -43.55592053 -43.86814928 -44.18037802
 -44.49260676 -44.80483549 -45.11706423 -45.42929296 -45.74152168
 -46.05375041 -46.36597913 -46.67820785 -46.99043657 -47.30266528
 -47.61489399 -47.9271227  -48.23935141 -48.55158011 -48.86380881
 -49.1760375  -49.48826619 -49.80049488 -50.11272357 -50.42495225
 -50.73718092 -51.0494096  -51.36163826 -51.67386693 -51.98609559
 -52.29832425 -52.6105529  -52.92278154 -53.23501019 -53.54723882
 -53.85946746 -54.17169608 -54.48392471 -54.79615332 -55.10838194
 -55.42061054 -55.73283914 -56.04506774 -56.35729633 -56.66952491
 -56.98175348 -57.29398205 -57.60621062 -57.91843917 -58.23066772
 -58.54289626 -58.85512479 -59.16735332 -59.47958183 -59.79181034
 -60.10403884 -60.41626733 -60.72849581 -61.04072429 -61.35295275
 -61.6651812  -61.97740964 -62.28963807 -62.60186649 -62.9140949
 -63.22632329 -63.53855168 -63.85078005 -64.1630084  -64.47523674
 -64.78746507 -65.09969339 -65.41192168 -65.72414997 -66.03637823
 -66.34860648 -66.66083471 -66.97306292 -67.28529111 -67.59751928
 -67.90974743 -68.22197555 -68.53420365 -68.84643173 -69.15865979
 -69.47088781 -69.78311581 -70.09534378 -70.40757172 -70.71979963
 -71.0320275  -71.34425534 -71.65648314 -71.96871091 -72.28093863
 -72.5931663  -72.90539394 -73.21762152 -73.52984906 -73.84207654
 -74.15430396 -74.46653132 -74.77875862 -75.09098585 -75.403213
 -75.71544008 -76.02766708 -76.33989399 -76.6521208  -76.96434752
 -77.27657412 -77.58880061 -77.90102697 -78.2132532  -78.52547927
 -78.83770519 -79.14993094 -79.4621565  -79.77438185 -80.08660697
 -80.39883185 -80.71105646 -81.02328077 -81.33550474 -81.64772834
 -81.95995153 -82.27217426 -82.58439646 -82.89661807 -83.20883901
 -83.52105918 -83.83327847 -84.14549672 -84.45771378 -84.76992941
 -85.08214336 -85.39435528 -85.70656473 -86.01877113 -86.3309737
 -86.64317137 -86.95536264 -87.26754532 -87.57971611 -87.89186973
 -88.20399728 -88.51608246 -88.82809185 -89.13994449 -89.45138398
 -89.76099781]
x = -88.2904
ipdb> a[idx-1:-1]
a = [ 89.76099781  89.45138398  89.13994449  88.82809185  88.51608246
  88.20399728  87.89186973  87.57971611  87.26754532  86.95536264
  86.64317137  86.3309737   86.01877113  85.70656473  85.39435528
  85.08214336  84.76992941  84.45771378  84.14549672  83.83327847
  83.52105918  83.20883901  82.89661807  82.58439646  82.27217426
  81.95995153  81.64772834  81.33550474  81.02328077  80.71105646
  80.39883185  80.08660697  79.77438185  79.4621565   79.14993094
  78.83770519  78.52547927  78.2132532   77.90102697  77.58880061
  77.27657412  76.96434752  76.6521208   76.33989399  76.02766708
  75.71544008  75.403213    75.09098585  74.77875862  74.46653132
  74.15430396  73.84207654  73.52984906  73.21762152  72.90539394
  72.5931663   72.28093863  71.96871091  71.65648314  71.34425534
  71.0320275   70.71979963  70.40757172  70.09534378  69.78311581
  69.47088781  69.15865979  68.84643173  68.53420365  68.22197555
  67.90974743  67.59751928  67.28529111  66.97306292  66.66083471
  66.34860648  66.03637823  65.72414997  65.41192168  65.09969339
  64.78746507  64.47523674  64.1630084   63.85078005  63.53855168
  63.22632329  62.9140949   62.60186649  62.28963807  61.97740964
  61.6651812   61.35295275  61.04072429  60.72849581  60.41626733
  60.10403884  59.79181034  59.47958183  59.16735332  58.85512479
  58.54289626  58.23066772  57.91843917  57.60621062  57.29398205
  56.98175348  56.66952491  56.35729633  56.04506774  55.73283914
  55.42061054  55.10838194  54.79615332  54.48392471  54.17169608
  53.85946746  53.54723882  53.23501019  52.92278154  52.6105529
  52.29832425  51.98609559  51.67386693  51.36163826  51.0494096
  50.73718092  50.42495225  50.11272357  49.80049488  49.48826619
  49.1760375   48.86380881  48.55158011  48.23935141  47.9271227
  47.61489399  47.30266528  46.99043657  46.67820785  46.36597913
  46.05375041  45.74152168  45.42929296  45.11706423  44.80483549
  44.49260676  44.18037802  43.86814928  43.55592053  43.24369179
  42.93146304  42.61923429  42.30700554  41.99477678  41.68254803
  41.37031927  41.05809051  40.74586175  40.43363298  40.12140422
  39.80917545  39.49694668  39.18471791  38.87248913  38.56026036
  38.24803158  37.9358028   37.62357402  37.31134524  36.99911646
  36.68688767  36.37465889  36.0624301   35.75020131  35.43797252
  35.12574373  34.81351494  34.50128614  34.18905735  33.87682855
  33.56459975  33.25237095  32.94014215  32.62791335  32.31568455
  32.00345574  31.69122694  31.37899813  31.06676932  30.75454052
  30.44231171  30.1300829   29.81785409  29.50562527  29.19339646
  28.88116765  28.56893883  28.25671001  27.9444812   27.63225238
  27.32002356  27.00779474  26.69556592  26.3833371   26.07110828
  25.75887945  25.44665063  25.13442181  24.82219298  24.50996416
  24.19773533  23.8855065   23.57327767  23.26104885  22.94882002
  22.63659119  22.32436236  22.01213353  21.69990469  21.38767586
  21.07544703  20.7632182   20.45098936  20.13876053  19.82653169
  19.51430286  19.20207402  18.88984518  18.57761635  18.26538751
  17.95315867  17.64092983  17.328701    17.01647216  16.70424332
  16.39201448  16.07978564  15.76755679  15.45532795  15.14309911
  14.83087027  14.51864143  14.20641258  13.89418374  13.5819549
  13.26972605  12.95749721  12.64526837  12.33303952  12.02081068
  11.70858183  11.39635299  11.08412414  10.77189529  10.45966645
  10.1474376    9.83520875   9.52297991   9.21075106   8.89852221
   8.58629336   8.27406452   7.96183567   7.64960682   7.33737797
   7.02514912   6.71292027   6.40069142   6.08846258   5.77623373
   5.46400488   5.15177603   4.83954718   4.52731833   4.21508948
   3.90286063   3.59063178   3.27840293   2.96617408   2.65394523
   2.34171638   2.02948753   1.71725868   1.40502983   1.09280098
   0.78057213   0.46834328   0.15611443  -0.15611443  -0.46834328
  -0.78057213  -1.09280098  -1.40502983  -1.71725868  -2.02948753
  -2.34171638  -2.65394523  -2.96617408  -3.27840293  -3.59063178
  -3.90286063  -4.21508948  -4.52731833  -4.83954718  -5.15177603
  -5.46400488  -5.77623373  -6.08846258  -6.40069142  -6.71292027
  -7.02514912  -7.33737797  -7.64960682  -7.96183567  -8.27406452
  -8.58629336  -8.89852221  -9.21075106  -9.52297991  -9.83520875
 -10.1474376  -10.45966645 -10.77189529 -11.08412414 -11.39635299
 -11.70858183 -12.02081068 -12.33303952 -12.64526837 -12.95749721
 -13.26972605 -13.5819549  -13.89418374 -14.20641258 -14.51864143
 -14.83087027 -15.14309911 -15.45532795 -15.76755679 -16.07978564
 -16.39201448 -16.70424332 -17.01647216 -17.328701   -17.64092983
 -17.95315867 -18.26538751 -18.57761635 -18.88984518 -19.20207402
 -19.51430286 -19.82653169 -20.13876053 -20.45098936 -20.7632182
 -21.07544703 -21.38767586 -21.69990469 -22.01213353 -22.32436236
 -22.63659119 -22.94882002 -23.26104885 -23.57327767 -23.8855065
 -24.19773533 -24.50996416 -24.82219298 -25.13442181 -25.44665063
 -25.75887945 -26.07110828 -26.3833371  -26.69556592 -27.00779474
 -27.32002356 -27.63225238 -27.9444812  -28.25671001 -28.56893883
 -28.88116765 -29.19339646 -29.50562527 -29.81785409 -30.1300829
 -30.44231171 -30.75454052 -31.06676932 -31.37899813 -31.69122694
 -32.00345574 -32.31568455 -32.62791335 -32.94014215 -33.25237095
 -33.56459975 -33.87682855 -34.18905735 -34.50128614 -34.81351494
 -35.12574373 -35.43797252 -35.75020131 -36.0624301  -36.37465889
 -36.68688767 -36.99911646 -37.31134524 -37.62357402 -37.9358028
 -38.24803158 -38.56026036 -38.87248913 -39.18471791 -39.49694668
 -39.80917545 -40.12140422 -40.43363298 -40.74586175 -41.05809051
 -41.37031927 -41.68254803 -41.99477678 -42.30700554 -42.61923429
 -42.93146304 -43.24369179 -43.55592053 -43.86814928 -44.18037802
 -44.49260676 -44.80483549 -45.11706423 -45.42929296 -45.74152168
 -46.05375041 -46.36597913 -46.67820785 -46.99043657 -47.30266528
 -47.61489399 -47.9271227  -48.23935141 -48.55158011 -48.86380881
 -49.1760375  -49.48826619 -49.80049488 -50.11272357 -50.42495225
 -50.73718092 -51.0494096  -51.36163826 -51.67386693 -51.98609559
 -52.29832425 -52.6105529  -52.92278154 -53.23501019 -53.54723882
 -53.85946746 -54.17169608 -54.48392471 -54.79615332 -55.10838194
 -55.42061054 -55.73283914 -56.04506774 -56.35729633 -56.66952491
 -56.98175348 -57.29398205 -57.60621062 -57.91843917 -58.23066772
 -58.54289626 -58.85512479 -59.16735332 -59.47958183 -59.79181034
 -60.10403884 -60.41626733 -60.72849581 -61.04072429 -61.35295275
 -61.6651812  -61.97740964 -62.28963807 -62.60186649 -62.9140949
 -63.22632329 -63.53855168 -63.85078005 -64.1630084  -64.47523674
 -64.78746507 -65.09969339 -65.41192168 -65.72414997 -66.03637823
 -66.34860648 -66.66083471 -66.97306292 -67.28529111 -67.59751928
 -67.90974743 -68.22197555 -68.53420365 -68.84643173 -69.15865979
 -69.47088781 -69.78311581 -70.09534378 -70.40757172 -70.71979963
 -71.0320275  -71.34425534 -71.65648314 -71.96871091 -72.28093863
 -72.5931663  -72.90539394 -73.21762152 -73.52984906 -73.84207654
 -74.15430396 -74.46653132 -74.77875862 -75.09098585 -75.403213
 -75.71544008 -76.02766708 -76.33989399 -76.6521208  -76.96434752
 -77.27657412 -77.58880061 -77.90102697 -78.2132532  -78.52547927
 -78.83770519 -79.14993094 -79.4621565  -79.77438185 -80.08660697
 -80.39883185 -80.71105646 -81.02328077 -81.33550474 -81.64772834
 -81.95995153 -82.27217426 -82.58439646 -82.89661807 -83.20883901
 -83.52105918 -83.83327847 -84.14549672 -84.45771378 -84.76992941
 -85.08214336 -85.39435528 -85.70656473 -86.01877113 -86.3309737
 -86.64317137 -86.95536264 -87.26754532 -87.57971611 -87.89186973
 -88.20399728 -88.51608246 -88.82809185 -89.13994449 -89.45138398
 -89.76099781]
x = -88.2904
ipdb> idx
571
ipdb> len(a)
576
ipdb> a[idx:576]
*** output flushed ***
ipdb> a[576]
*** output flushed ***
ipdb> type(a)
<type 'numpy.ndarray'>
ipdb> a.shape
*** output flushed ***
ipdb> lon
*** NameError: name 'lon' is not defined
ipdb> q

In [195]: lon
Out[195]:
array([  0.00000000e+00,   3.12499576e-01,   6.24999152e-01, ...,
         3.59062013e+02,   3.59374512e+02,   3.59687012e+02])

In [196]: np.arange(10, 0, -1)
Out[196]: array([10,  9,  8,  7,  6,  5,  4,  3,  2,  1])

In [197]: pdb
Automatic pdb calling has been turned OFF

In [198]: run CFSR_site_extractor.py
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in <module>()
    136
    137     sites = [SoilSite(*k).get_T362_x_y(T362_lon, T362_lat) for k in
--> 138              zip(names, lats, lons)]
    139
    140

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in get_T362_x_y(self, T362_lat, T362_lon)
     58             T362_lat,
     59             self.lat,
---> 60             sorter=np.arange(len(T362_lat), 0, -1))
     61         return(self)
     62

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in searchsorted(a, v, side, sorter)
   1006     except AttributeError:
   1007         return _wrapit(a, 'searchsorted', v, side, sorter)
-> 1008     return searchsorted(v, side, sorter)
   1009
   1010

ValueError: Sorter index out of range.

In [199]: run CFSR_site_extractor.py
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in <module>()
    136
    137     sites = [SoilSite(*k).get_T362_x_y(T362_lon, T362_lat) for k in
--> 138              zip(names, lats, lons)]
    139
    140

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in get_T362_x_y(self, T362_lat, T362_lon)
     58             T362_lat,
     59             self.lat,
---> 60             sorter=np.arange(len(T362_lat)-1, 0, -1))
     61         return(self)
     62

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in searchsorted(a, v, side, sorter)
   1006     except AttributeError:
   1007         return _wrapit(a, 'searchsorted', v, side, sorter)
-> 1008     return searchsorted(v, side, sorter)
   1009
   1010

ValueError: sorter.size must equal a.size

In [200]: pdb
Automatic pdb calling has been turned ON

In [201]: run CFSR_site_extractor.py
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in <module>()
    136
    137     sites = [SoilSite(*k).get_T362_x_y(T362_lon, T362_lat) for k in
--> 138              zip(names, lats, lons)]
    139
    140

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in get_T362_x_y(self, T362_lat, T362_lon)
     58             T362_lat,
     59             self.lat,
---> 60             sorter=np.arange(len(T362_lat)-1, 0, -1))
     61         return(self)
     62

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in searchsorted(a, v, side, sorter)
   1006     except AttributeError:
   1007         return _wrapit(a, 'searchsorted', v, side, sorter)
-> 1008     return searchsorted(v, side, sorter)
   1009
   1010

ValueError: sorter.size must equal a.size
> /Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/numpy/core/fromnumeric.py(1008)searchsorted()
   1007         return _wrapit(a, 'searchsorted', v, side, sorter)
-> 1008     return searchsorted(v, side, sorter)
   1009

ipdb> up
> /Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py(60)get_T362_x_y()
     59             self.lat,
---> 60             sorter=np.arange(len(T362_lat)-1, 0, -1))
     61         return(self)

ipdb> np.arange(len(T362_lat)-1, 0, -1)
array([1151, 1150, 1149, ...,    3,    2,    1])
ipdb> q

In [202]: run CFSR_site_extractor.py
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in <module>()
    136
    137     sites = [SoilSite(*k).get_T362_x_y(T362_lon, T362_lat) for k in
--> 138              zip(names, lats, lons)]
    139
    140

/Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py in get_T362_x_y(self, T362_lon, T362_lat)
     58             T362_lat,
     59             self.lat,
---> 60             sorter=np.arange(len(T362_lat)-1, 0, -1))
     61         return(self)
     62

/Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/numpy/core/fromnumeric.pyc in searchsorted(a, v, side, sorter)
   1006     except AttributeError:
   1007         return _wrapit(a, 'searchsorted', v, side, sorter)
-> 1008     return searchsorted(v, side, sorter)
   1009
   1010

ValueError: sorter.size must equal a.size
> /Users/tim/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/numpy/core/fromnumeric.py(1008)searchsorted()
   1007         return _wrapit(a, 'searchsorted', v, side, sorter)
-> 1008     return searchsorted(v, side, sorter)
   1009

ipdb> up
> /Users/tim/work/Code/2015-03_SoilDataForMary/CFSR_site_extractor.py(60)get_T362_x_y()
     59             self.lat,
---> 60             sorter=np.arange(len(T362_lat)-1, 0, -1))
     61         return(self)

ipdb> np.arange(len(T362_lat)-1, 0, -1)
array([575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563,
       562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550,
       549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537,
       536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524,
       523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511,
       510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498,
       497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485,
       484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472,
       471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459,
       458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446,
       445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433,
       432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420,
       419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407,
       406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394,
       393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381,
       380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368,
       367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355,
       354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342,
       341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329,
       328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316,
       315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303,
       302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290,
       289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277,
       276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264,
       263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251,
       250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238,
       237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225,
       224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212,
       211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199,
       198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186,
       185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173,
       172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160,
       159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147,
       146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134,
       133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121,
       120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108,
       107, 106, 105, 104, 103, 102, 101, 100,  99,  98,  97,  96,  95,
        94,  93,  92,  91,  90,  89,  88,  87,  86,  85,  84,  83,  82,
        81,  80,  79,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,
        68,  67,  66,  65,  64,  63,  62,  61,  60,  59,  58,  57,  56,
        55,  54,  53,  52,  51,  50,  49,  48,  47,  46,  45,  44,  43,
        42,  41,  40,  39,  38,  37,  36,  35,  34,  33,  32,  31,  30,
        29,  28,  27,  26,  25,  24,  23,  22,  21,  20,  19,  18,  17,
        16,  15,  14,  13,  12,  11,  10,   9,   8,   7,   6,   5,   4,
         3,   2,   1])
ipdb> np.arange(len(T362_lat)-1, 0, -1).shape
(575,)
ipdb> np.arange(len(T362_lat), 0, -1).shape
(576,)
ipdb> len(T362_lat)
576
ipdb> self.lat
40.0062
ipdb> T362_lat
array([ 89.76099781,  89.45138398,  89.13994449,  88.82809185,
        88.51608246,  88.20399728,  87.89186973,  87.57971611,
        87.26754532,  86.95536264,  86.64317137,  86.3309737 ,
        86.01877113,  85.70656473,  85.39435528,  85.08214336,
        84.76992941,  84.45771378,  84.14549672,  83.83327847,
        83.52105918,  83.20883901,  82.89661807,  82.58439646,
        82.27217426,  81.95995153,  81.64772834,  81.33550474,
        81.02328077,  80.71105646,  80.39883185,  80.08660697,
        79.77438185,  79.4621565 ,  79.14993094,  78.83770519,
        78.52547927,  78.2132532 ,  77.90102697,  77.58880061,
        77.27657412,  76.96434752,  76.6521208 ,  76.33989399,
        76.02766708,  75.71544008,  75.403213  ,  75.09098585,
        74.77875862,  74.46653132,  74.15430396,  73.84207654,
        73.52984906,  73.21762152,  72.90539394,  72.5931663 ,
        72.28093863,  71.96871091,  71.65648314,  71.34425534,
        71.0320275 ,  70.71979963,  70.40757172,  70.09534378,
        69.78311581,  69.47088781,  69.15865979,  68.84643173,
        68.53420365,  68.22197555,  67.90974743,  67.59751928,
        67.28529111,  66.97306292,  66.66083471,  66.34860648,
        66.03637823,  65.72414997,  65.41192168,  65.09969339,
        64.78746507,  64.47523674,  64.1630084 ,  63.85078005,
        63.53855168,  63.22632329,  62.9140949 ,  62.60186649,
        62.28963807,  61.97740964,  61.6651812 ,  61.35295275,
        61.04072429,  60.72849581,  60.41626733,  60.10403884,
        59.79181034,  59.47958183,  59.16735332,  58.85512479,
        58.54289626,  58.23066772,  57.91843917,  57.60621062,
        57.29398205,  56.98175348,  56.66952491,  56.35729633,
        56.04506774,  55.73283914,  55.42061054,  55.10838194,
        54.79615332,  54.48392471,  54.17169608,  53.85946746,
        53.54723882,  53.23501019,  52.92278154,  52.6105529 ,
        52.29832425,  51.98609559,  51.67386693,  51.36163826,
        51.0494096 ,  50.73718092,  50.42495225,  50.11272357,
        49.80049488,  49.48826619,  49.1760375 ,  48.86380881,
        48.55158011,  48.23935141,  47.9271227 ,  47.61489399,
        47.30266528,  46.99043657,  46.67820785,  46.36597913,
        46.05375041,  45.74152168,  45.42929296,  45.11706423,
        44.80483549,  44.49260676,  44.18037802,  43.86814928,
        43.55592053,  43.24369179,  42.93146304,  42.61923429,
        42.30700554,  41.99477678,  41.68254803,  41.37031927,
        41.05809051,  40.74586175,  40.43363298,  40.12140422,
        39.80917545,  39.49694668,  39.18471791,  38.87248913,
        38.56026036,  38.24803158,  37.9358028 ,  37.62357402,
        37.31134524,  36.99911646,  36.68688767,  36.37465889,
        36.0624301 ,  35.75020131,  35.43797252,  35.12574373,
        34.81351494,  34.50128614,  34.18905735,  33.87682855,
        33.56459975,  33.25237095,  32.94014215,  32.62791335,
        32.31568455,  32.00345574,  31.69122694,  31.37899813,
        31.06676932,  30.75454052,  30.44231171,  30.1300829 ,
        29.81785409,  29.50562527,  29.19339646,  28.88116765,
        28.56893883,  28.25671001,  27.9444812 ,  27.63225238,
        27.32002356,  27.00779474,  26.69556592,  26.3833371 ,
        26.07110828,  25.75887945,  25.44665063,  25.13442181,
        24.82219298,  24.50996416,  24.19773533,  23.8855065 ,
        23.57327767,  23.26104885,  22.94882002,  22.63659119,
        22.32436236,  22.01213353,  21.69990469,  21.38767586,
        21.07544703,  20.7632182 ,  20.45098936,  20.13876053,
        19.82653169,  19.51430286,  19.20207402,  18.88984518,
        18.57761635,  18.26538751,  17.95315867,  17.64092983,
        17.328701  ,  17.01647216,  16.70424332,  16.39201448,
        16.07978564,  15.76755679,  15.45532795,  15.14309911,
        14.83087027,  14.51864143,  14.20641258,  13.89418374,
        13.5819549 ,  13.26972605,  12.95749721,  12.64526837,
        12.33303952,  12.02081068,  11.70858183,  11.39635299,
        11.08412414,  10.77189529,  10.45966645,  10.1474376 ,
         9.83520875,   9.52297991,   9.21075106,   8.89852221,
         8.58629336,   8.27406452,   7.96183567,   7.64960682,
         7.33737797,   7.02514912,   6.71292027,   6.40069142,
         6.08846258,   5.77623373,   5.46400488,   5.15177603,
         4.83954718,   4.52731833,   4.21508948,   3.90286063,
         3.59063178,   3.27840293,   2.96617408,   2.65394523,
         2.34171638,   2.02948753,   1.71725868,   1.40502983,
         1.09280098,   0.78057213,   0.46834328,   0.15611443,
        -0.15611443,  -0.46834328,  -0.78057213,  -1.09280098,
        -1.40502983,  -1.71725868,  -2.02948753,  -2.34171638,
        -2.65394523,  -2.96617408,  -3.27840293,  -3.59063178,
        -3.90286063,  -4.21508948,  -4.52731833,  -4.83954718,
        -5.15177603,  -5.46400488,  -5.77623373,  -6.08846258,
        -6.40069142,  -6.71292027,  -7.02514912,  -7.33737797,
        -7.64960682,  -7.96183567,  -8.27406452,  -8.58629336,
        -8.89852221,  -9.21075106,  -9.52297991,  -9.83520875,
       -10.1474376 , -10.45966645, -10.77189529, -11.08412414,
       -11.39635299, -11.70858183, -12.02081068, -12.33303952,
       -12.64526837, -12.95749721, -13.26972605, -13.5819549 ,
       -13.89418374, -14.20641258, -14.51864143, -14.83087027,
       -15.14309911, -15.45532795, -15.76755679, -16.07978564,
       -16.39201448, -16.70424332, -17.01647216, -17.328701  ,
       -17.64092983, -17.95315867, -18.26538751, -18.57761635,
       -18.88984518, -19.20207402, -19.51430286, -19.82653169,
       -20.13876053, -20.45098936, -20.7632182 , -21.07544703,
       -21.38767586, -21.69990469, -22.01213353, -22.32436236,
       -22.63659119, -22.94882002, -23.26104885, -23.57327767,
       -23.8855065 , -24.19773533, -24.50996416, -24.82219298,
       -25.13442181, -25.44665063, -25.75887945, -26.07110828,
       -26.3833371 , -26.69556592, -27.00779474, -27.32002356,
       -27.63225238, -27.9444812 , -28.25671001, -28.56893883,
       -28.88116765, -29.19339646, -29.50562527, -29.81785409,
       -30.1300829 , -30.44231171, -30.75454052, -31.06676932,
       -31.37899813, -31.69122694, -32.00345574, -32.31568455,
       -32.62791335, -32.94014215, -33.25237095, -33.56459975,
       -33.87682855, -34.18905735, -34.50128614, -34.81351494,
       -35.12574373, -35.43797252, -35.75020131, -36.0624301 ,
       -36.37465889, -36.68688767, -36.99911646, -37.31134524,
       -37.62357402, -37.9358028 , -38.24803158, -38.56026036,
       -38.87248913, -39.18471791, -39.49694668, -39.80917545,
       -40.12140422, -40.43363298, -40.74586175, -41.05809051,
       -41.37031927, -41.68254803, -41.99477678, -42.30700554,
       -42.61923429, -42.93146304, -43.24369179, -43.55592053,
       -43.86814928, -44.18037802, -44.49260676, -44.80483549,
       -45.11706423, -45.42929296, -45.74152168, -46.05375041,
       -46.36597913, -46.67820785, -46.99043657, -47.30266528,
       -47.61489399, -47.9271227 , -48.23935141, -48.55158011,
       -48.86380881, -49.1760375 , -49.48826619, -49.80049488,
       -50.11272357, -50.42495225, -50.73718092, -51.0494096 ,
       -51.36163826, -51.67386693, -51.98609559, -52.29832425,
       -52.6105529 , -52.92278154, -53.23501019, -53.54723882,
       -53.85946746, -54.17169608, -54.48392471, -54.79615332,
       -55.10838194, -55.42061054, -55.73283914, -56.04506774,
       -56.35729633, -56.66952491, -56.98175348, -57.29398205,
       -57.60621062, -57.91843917, -58.23066772, -58.54289626,
       -58.85512479, -59.16735332, -59.47958183, -59.79181034,
       -60.10403884, -60.41626733, -60.72849581, -61.04072429,
       -61.35295275, -61.6651812 , -61.97740964, -62.28963807,
       -62.60186649, -62.9140949 , -63.22632329, -63.53855168,
       -63.85078005, -64.1630084 , -64.47523674, -64.78746507,
       -65.09969339, -65.41192168, -65.72414997, -66.03637823,
       -66.34860648, -66.66083471, -66.97306292, -67.28529111,
       -67.59751928, -67.90974743, -68.22197555, -68.53420365,
       -68.84643173, -69.15865979, -69.47088781, -69.78311581,
       -70.09534378, -70.40757172, -70.71979963, -71.0320275 ,
       -71.34425534, -71.65648314, -71.96871091, -72.28093863,
       -72.5931663 , -72.90539394, -73.21762152, -73.52984906,
       -73.84207654, -74.15430396, -74.46653132, -74.77875862,
       -75.09098585, -75.403213  , -75.71544008, -76.02766708,
       -76.33989399, -76.6521208 , -76.96434752, -77.27657412,
       -77.58880061, -77.90102697, -78.2132532 , -78.52547927,
       -78.83770519, -79.14993094, -79.4621565 , -79.77438185,
       -80.08660697, -80.39883185, -80.71105646, -81.02328077,
       -81.33550474, -81.64772834, -81.95995153, -82.27217426,
       -82.58439646, -82.89661807, -83.20883901, -83.52105918,
       -83.83327847, -84.14549672, -84.45771378, -84.76992941,
       -85.08214336, -85.39435528, -85.70656473, -86.01877113,
       -86.3309737 , -86.64317137, -86.95536264, -87.26754532,
       -87.57971611, -87.89186973, -88.20399728, -88.51608246,
       -88.82809185, -89.13994449, -89.45138398, -89.76099781])
ipdb> np.searchsorted(T362_lat, self.lat, sorter=np.arange(len(T362_lat)-1, 0, -1))
*** ValueError: sorter.size must equal a.size
ipdb> np.arange(len(T362_lat)-1, 0, -1).size
575
ipdb> np.searchsorted(T362_lat, self.lat, sorter=np.arange(len(T362_lat), 0, -1))
417
ipdb> q

In [203]: pdb
Automatic pdb calling has been turned OFF

In [204]: run CFSR_site_extractor.py

In [205]: sites
Out[205]:
[<__main__.SoilSite at 0x10cfa6410>,
 <__main__.SoilSite at 0x10cfda610>,
 <__main__.SoilSite at 0x10cfbd850>,
 <__main__.SoilSite at 0x10cfbd3d0>,
 <__main__.SoilSite at 0x10cfbd490>,
 <__main__.SoilSite at 0x10cfbd590>]

In [206]: sites[0]
Out[206]: <__main__.SoilSite at 0x10cfa6410>

In [207]: printsites[0]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-207-2eb6dc9233a6> in <module>()
----> 1 printsites[0]

NameError: name 'printsites' is not defined

In [208]: print sites[0]
Bondville (-88.2904, 40.0062)

In [209]: run CFSR_site_extractor.py

In [210]: print sites[0]
Bondville (-88.2904, 40.0062), (0, 159)

In [211]: T362_lon
Out[211]:
array([  0.00000000e+00,   3.12499576e-01,   6.24999152e-01, ...,
         3.59062013e+02,   3.59374512e+02,   3.59687012e+02])

In [212]: run CFSR_site_extractor.py

In [213]: print sites[0]
Bondville (-88.2904, 40.0062), (0, 159)

In [214]: run CFSR_site_extractor.py

In [215]: print sites[0]
Bondville (-88.2904, 40.0062), (294, 159)

In [216]: T362_lon[290:299
   .....:   C-c C-c
KeyboardInterrupt

In [220]:

In [220]: T362_lon[290:299]
Out[220]:
array([ 90.62487698,  90.93737655,  91.24987613,  91.5623757 ,
        91.87487528,  92.18737485,  92.49987443,  92.81237401,  93.12487358])

In [221]: run CFSR_site_extractor.py

In [222]: print sites[0]
Bondville (-88.2904, 40.0062), (870, 159)

In [223]: T362_lon[865:875]
Out[223]:
array([ 270.31213305,  270.62463262,  270.9371322 ,  271.24963177,
        271.56213135,  271.87463093,  272.1871305 ,  272.49963008,
        272.81212965,  273.12462923])

In [224]: 360 - 88.2904
Out[224]: 271.7096

In [225]: T362_lat[155:165]
Out[225]:
array([ 41.37031927,  41.05809051,  40.74586175,  40.43363298,
        40.12140422,  39.80917545,  39.49694668,  39.18471791,
        38.87248913,  38.56026036])

In [226]: run CFSR_site_extractor.py

In [227]: print sites[0]
Bondville (-88.2904, 40.0062), (870, 160)

In [228]: nc = Nomads_CFSR_HourlyTS_URL('200807', 'soilm1')

In [253]: nc.variables
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-253-69ac2392a140> in <module>()
----> 1 nc.variables

AttributeError: 'Nomads_CFSR_HourlyTS_URL' object has no attribute 'variables'

In [254]: nc = netCDF4.Dataset(Nomads_CFSR_HourlyTS_URL('200807', 'soilm1').get_URL())